{
  "name": "enums",
  "description": "Tests for enum types.",
  "section": [
    {
      "name": "legacy_proto2",
      "description": "Legacy semantics where all enums are ints, proto2.",
      "test": [
        {
          "name": "literal_global",
          "expr": "GlobalEnum.GAZ",
          "value": {
            "int64Value": "2"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "literal_nested",
          "expr": "TestAllTypes.NestedEnum.BAR",
          "value": {
            "int64Value": "1"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "literal_zero",
          "expr": "GlobalEnum.GOO",
          "value": {
            "int64Value": "0"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "comparision",
          "expr": "GlobalEnum.GAR == 1",
          "value": {
            "boolValue": true
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "arithmetic",
          "expr": "TestAllTypes.NestedEnum.BAR + 3",
          "value": {
            "int64Value": "4"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "type_global",
          "expr": "type(GlobalEnum.GOO)",
          "value": {
            "typeValue": "int"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "type_nested",
          "expr": "type(TestAllTypes.NestedEnum.BAZ)",
          "value": {
            "typeValue": "int"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "select_default",
          "expr": "TestAllTypes{}.standalone_enum",
          "value": {
            "int64Value": "0"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "field_type",
          "expr": "type(TestAllTypes{}.standalone_enum)",
          "value": {
            "typeValue": "int"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "assign_standalone_name",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum.BAZ}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto2.TestAllTypes",
              "standaloneEnum": "BAZ"
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "assign_standalone_int",
          "expr": "TestAllTypes{standalone_enum: 1}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto2.TestAllTypes",
              "standaloneEnum": "BAR"
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "assign_standalone_int_too_big",
          "expr": "TestAllTypes{standalone_enum: 5000000000}",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "assign_standalone_int_too_neg",
          "expr": "TestAllTypes{standalone_enum: -7000000000}",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto2"
        }
      ]
    },
    {
      "name": "legacy_proto3",
      "description": "Legacy semantics where all enums are ints, proto3",
      "test": [
        {
          "name": "literal_global",
          "expr": "GlobalEnum.GAZ",
          "value": {
            "int64Value": "2"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "literal_nested",
          "expr": "TestAllTypes.NestedEnum.BAR",
          "value": {
            "int64Value": "1"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "literal_zero",
          "expr": "GlobalEnum.GOO",
          "value": {
            "int64Value": "0"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "comparision",
          "expr": "GlobalEnum.GAR == 1",
          "value": {
            "boolValue": true
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "arithmetic",
          "expr": "TestAllTypes.NestedEnum.BAR + 3",
          "value": {
            "int64Value": "4"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "type_global",
          "expr": "type(GlobalEnum.GOO)",
          "value": {
            "typeValue": "int"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "type_nested",
          "expr": "type(TestAllTypes.NestedEnum.BAZ)",
          "value": {
            "typeValue": "int"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select_default",
          "expr": "TestAllTypes{}.standalone_enum",
          "value": {
            "int64Value": "0"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select",
          "expr": "x.standalone_enum",
          "typeEnv": [
            {
              "name": "x",
              "ident": {
                "type": {
                  "messageType": "cel.expr.conformance.proto3.TestAllTypes"
                }
              }
            }
          ],
          "bindings": {
            "x": {
              "value": {
                "objectValue": {
                  "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
                  "standaloneEnum": "BAZ"
                }
              }
            }
          },
          "value": {
            "int64Value": "2"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select_big",
          "expr": "x.standalone_enum",
          "typeEnv": [
            {
              "name": "x",
              "ident": {
                "type": {
                  "messageType": "cel.expr.conformance.proto3.TestAllTypes"
                }
              }
            }
          ],
          "bindings": {
            "x": {
              "value": {
                "objectValue": {
                  "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
                  "standaloneEnum": 108
                }
              }
            }
          },
          "value": {
            "int64Value": "108"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select_neg",
          "expr": "x.standalone_enum",
          "typeEnv": [
            {
              "name": "x",
              "ident": {
                "type": {
                  "messageType": "cel.expr.conformance.proto3.TestAllTypes"
                }
              }
            }
          ],
          "bindings": {
            "x": {
              "value": {
                "objectValue": {
                  "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
                  "standaloneEnum": -3
                }
              }
            }
          },
          "value": {
            "int64Value": "-3"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "field_type",
          "expr": "type(TestAllTypes{}.standalone_enum)",
          "value": {
            "typeValue": "int"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_name",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum.BAZ}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": "BAZ"
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int",
          "expr": "TestAllTypes{standalone_enum: 1}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": "BAR"
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int_big",
          "expr": "TestAllTypes{standalone_enum: 99}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": 99
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int_neg",
          "expr": "TestAllTypes{standalone_enum: -1}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": -1
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int_too_big",
          "expr": "TestAllTypes{standalone_enum: 5000000000}",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int_too_neg",
          "expr": "TestAllTypes{standalone_enum: -7000000000}",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto3"
        }
      ]
    },
    {
      "name": "strong_proto2",
      "description": "String semantics where enums are distinct types, proto2.",
      "test": [
        {
          "name": "literal_global",
          "expr": "GlobalEnum.GAZ",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.GlobalEnum",
              "value": 2
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "literal_nested",
          "expr": "TestAllTypes.NestedEnum.BAR",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.TestAllTypes.NestedEnum",
              "value": 1
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "literal_zero",
          "expr": "GlobalEnum.GOO",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.GlobalEnum"
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "comparision_true",
          "expr": "GlobalEnum.GAR == GlobalEnum.GAR",
          "value": {
            "boolValue": true
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "comparision_false",
          "expr": "GlobalEnum.GAR == GlobalEnum.GAZ",
          "value": {
            "boolValue": false
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "type_global",
          "expr": "type(GlobalEnum.GOO)",
          "value": {
            "typeValue": "cel.expr.conformance.proto2.GlobalEnum"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "type_nested",
          "expr": "type(TestAllTypes.NestedEnum.BAZ)",
          "value": {
            "typeValue": "cel.expr.conformance.proto2.TestAllTypes.NestedEnum"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "select_default",
          "expr": "TestAllTypes{}.standalone_enum",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.TestAllTypes.NestedEnum"
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "field_type",
          "expr": "type(TestAllTypes{}.standalone_enum)",
          "value": {
            "typeValue": "cel.expr.conformance.proto2.TestAllTypes.NestedEnum"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "assign_standalone_name",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum.BAZ}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto2.TestAllTypes",
              "standaloneEnum": "BAZ"
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "assign_standalone_int",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum(1)}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto2.TestAllTypes",
              "standaloneEnum": "BAR"
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_symbol_to_int",
          "expr": "int(GlobalEnum.GAZ)",
          "value": {
            "int64Value": "2"
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_unnamed_to_int",
          "description": "Disable check - missing way to declare enums.",
          "expr": "int(x)",
          "disableCheck": true,
          "bindings": {
            "x": {
              "value": {
                "enumValue": {
                  "type": "cel.expr.conformance.proto2.GlobalEnum",
                  "value": 444
                }
              }
            }
          },
          "value": {
            "int64Value": "444"
          }
        },
        {
          "name": "convert_int_inrange",
          "expr": "TestAllTypes.NestedEnum(2)",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.TestAllTypes.NestedEnum",
              "value": 2
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_int_big",
          "expr": "TestAllTypes.NestedEnum(20000)",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.TestAllTypes.NestedEnum",
              "value": 20000
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_int_neg",
          "expr": "GlobalEnum(-33)",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.GlobalEnum",
              "value": -33
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_int_too_big",
          "expr": "TestAllTypes.NestedEnum(5000000000)",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_int_too_neg",
          "expr": "TestAllTypes.NestedEnum(-7000000000)",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_string",
          "expr": "TestAllTypes.NestedEnum('BAZ')",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto2.TestAllTypes.NestedEnum",
              "value": 2
            }
          },
          "container": "cel.expr.conformance.proto2"
        },
        {
          "name": "convert_string_bad",
          "expr": "TestAllTypes.NestedEnum('BLETCH')",
          "evalError": {
            "errors": [
              {
                "message": "invalid"
              }
            ]
          },
          "container": "cel.expr.conformance.proto2"
        }
      ]
    },
    {
      "name": "strong_proto3",
      "description": "String semantics where enums are distinct types, proto3.",
      "test": [
        {
          "name": "literal_global",
          "expr": "GlobalEnum.GAZ",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.GlobalEnum",
              "value": 2
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "literal_nested",
          "expr": "TestAllTypes.NestedEnum.BAR",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum",
              "value": 1
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "literal_zero",
          "expr": "GlobalEnum.GOO",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.GlobalEnum"
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "comparision_true",
          "expr": "GlobalEnum.GAR == GlobalEnum.GAR",
          "value": {
            "boolValue": true
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "comparision_false",
          "expr": "GlobalEnum.GAR == GlobalEnum.GAZ",
          "value": {
            "boolValue": false
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "type_global",
          "expr": "type(GlobalEnum.GOO)",
          "value": {
            "typeValue": "cel.expr.conformance.proto3.GlobalEnum"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "type_nested",
          "expr": "type(TestAllTypes.NestedEnum.BAZ)",
          "value": {
            "typeValue": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select_default",
          "expr": "TestAllTypes{}.standalone_enum",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum"
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select",
          "expr": "x.standalone_enum",
          "typeEnv": [
            {
              "name": "x",
              "ident": {
                "type": {
                  "messageType": "cel.expr.conformance.proto3.TestAllTypes"
                }
              }
            }
          ],
          "bindings": {
            "x": {
              "value": {
                "objectValue": {
                  "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
                  "standaloneEnum": "BAZ"
                }
              }
            }
          },
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum",
              "value": 2
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select_big",
          "expr": "x.standalone_enum",
          "typeEnv": [
            {
              "name": "x",
              "ident": {
                "type": {
                  "messageType": "cel.expr.conformance.proto3.TestAllTypes"
                }
              }
            }
          ],
          "bindings": {
            "x": {
              "value": {
                "objectValue": {
                  "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
                  "standaloneEnum": 108
                }
              }
            }
          },
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum",
              "value": 108
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "select_neg",
          "expr": "x.standalone_enum",
          "typeEnv": [
            {
              "name": "x",
              "ident": {
                "type": {
                  "messageType": "cel.expr.conformance.proto3.TestAllTypes"
                }
              }
            }
          ],
          "bindings": {
            "x": {
              "value": {
                "objectValue": {
                  "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
                  "standaloneEnum": -3
                }
              }
            }
          },
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum",
              "value": -3
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "field_type",
          "expr": "type(TestAllTypes{}.standalone_enum)",
          "value": {
            "typeValue": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_name",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum.BAZ}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": "BAZ"
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum(1)}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": "BAR"
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int_big",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum(99)}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": 99
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "assign_standalone_int_neg",
          "expr": "TestAllTypes{standalone_enum: TestAllTypes.NestedEnum(-1)}",
          "value": {
            "objectValue": {
              "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
              "standaloneEnum": -1
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_symbol_to_int",
          "expr": "int(GlobalEnum.GAZ)",
          "value": {
            "int64Value": "2"
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_unnamed_to_int",
          "description": "Disable check - missing way to declare enums.",
          "expr": "int(x)",
          "disableCheck": true,
          "bindings": {
            "x": {
              "value": {
                "enumValue": {
                  "type": "cel.expr.conformance.proto3.GlobalEnum",
                  "value": 444
                }
              }
            }
          },
          "value": {
            "int64Value": "444"
          }
        },
        {
          "name": "convert_unnamed_to_int_select",
          "expr": "int(x.standalone_enum)",
          "typeEnv": [
            {
              "name": "x",
              "ident": {
                "type": {
                  "messageType": "cel.expr.conformance.proto3.TestAllTypes"
                }
              }
            }
          ],
          "bindings": {
            "x": {
              "value": {
                "objectValue": {
                  "@type": "type.googleapis.com/cel.expr.conformance.proto3.TestAllTypes",
                  "standaloneEnum": -987
                }
              }
            }
          },
          "value": {
            "int64Value": "-987"
          }
        },
        {
          "name": "convert_int_inrange",
          "expr": "TestAllTypes.NestedEnum(2)",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum",
              "value": 2
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_int_big",
          "expr": "TestAllTypes.NestedEnum(20000)",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum",
              "value": 20000
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_int_neg",
          "expr": "GlobalEnum(-33)",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.GlobalEnum",
              "value": -33
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_int_too_big",
          "expr": "TestAllTypes.NestedEnum(5000000000)",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_int_too_neg",
          "expr": "TestAllTypes.NestedEnum(-7000000000)",
          "evalError": {
            "errors": [
              {
                "message": "range"
              }
            ]
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_string",
          "expr": "TestAllTypes.NestedEnum('BAZ')",
          "value": {
            "enumValue": {
              "type": "cel.expr.conformance.proto3.TestAllTypes.NestedEnum",
              "value": 2
            }
          },
          "container": "cel.expr.conformance.proto3"
        },
        {
          "name": "convert_string_bad",
          "expr": "TestAllTypes.NestedEnum('BLETCH')",
          "evalError": {
            "errors": [
              {
                "message": "invalid"
              }
            ]
          },
          "container": "cel.expr.conformance.proto3"
        }
      ]
    }
  ]
}