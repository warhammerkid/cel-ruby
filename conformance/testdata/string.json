{
  "name": "string",
  "description": "Tests for string and bytes operations.",
  "section": [
    {
      "name": "size",
      "description": "Tests for the size() function.",
      "test": [
        {
          "name": "empty",
          "expr": "size('')",
          "value": {
            "int64Value": "0"
          }
        },
        {
          "name": "one_ascii",
          "expr": "size('A')",
          "value": {
            "int64Value": "1"
          }
        },
        {
          "name": "one_unicode",
          "expr": "size('\u00ff')",
          "value": {
            "int64Value": "1"
          }
        },
        {
          "name": "ascii",
          "expr": "size('four')",
          "value": {
            "int64Value": "4"
          }
        },
        {
          "name": "unicode",
          "expr": "size('\u03c0\u03ad\u03bd\u03c4\u03b5')",
          "value": {
            "int64Value": "5"
          }
        },
        {
          "name": "bytes_empty",
          "expr": "size(b'')",
          "value": {
            "int64Value": "0"
          }
        },
        {
          "name": "bytes",
          "expr": "size(b'abc')",
          "value": {
            "int64Value": "3"
          }
        }
      ]
    },
    {
      "name": "starts_with",
      "description": "Tests for the startsWith() function.",
      "test": [
        {
          "name": "basic_true",
          "expr": "'foobar'.startsWith('foo')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "basic_false",
          "expr": "'foobar'.startsWith('bar')",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "empty_target",
          "expr": "''.startsWith('foo')",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "empty_arg",
          "expr": "'foobar'.startsWith('')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "empty_empty",
          "expr": "''.startsWith('')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "unicode",
          "expr": "'\u0437\u0430\u0432\u0442\u0440\u0430'.startsWith('\u0437\u0430')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "unicode_smp",
          "expr": "'\ud83d\udc31\ud83d\ude00\ud83d\ude1b'.startsWith('\ud83d\udc31')",
          "value": {
            "boolValue": true
          }
        }
      ]
    },
    {
      "name": "ends_with",
      "description": "Tests for the endsWith() function.",
      "test": [
        {
          "name": "basic_true",
          "expr": "'foobar'.endsWith('bar')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "basic_false",
          "expr": "'foobar'.endsWith('foo')",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "empty_target",
          "expr": "''.endsWith('foo')",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "empty_arg",
          "expr": "'foobar'.endsWith('')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "empty_empty",
          "expr": "''.endsWith('')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "unicode",
          "expr": "'fort\u00e9'.endsWith('t\u00e9')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "unicode_smp",
          "expr": "'\ud83d\udc31\ud83d\ude00\ud83d\ude1b'.endsWith('\ud83d\ude1b')",
          "value": {
            "boolValue": true
          }
        }
      ]
    },
    {
      "name": "matches",
      "description": "Tests for regexp matching.  For now, we will only test the subset of regular languages.",
      "test": [
        {
          "name": "basic",
          "expr": "'hubba'.matches('ubb')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "empty_target",
          "expr": "''.matches('foo|bar')",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "empty_arg",
          "expr": "'cows'.matches('')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "empty_empty",
          "expr": "''.matches('')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "re_concat",
          "expr": "'abcd'.matches('bc')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "re_alt",
          "expr": "'grey'.matches('gr(a|e)y')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "re_rep",
          "expr": "'banana'.matches('ba(na)*')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "unicode",
          "expr": "'ma\u00f1ana'.matches('a+\u00f1+a+')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "unicode_smp",
          "expr": "'\ud83d\udc31\ud83d\ude00\ud83d\ude00'.matches('(a|\ud83d\ude00){2}')",
          "value": {
            "boolValue": true
          }
        }
      ]
    },
    {
      "name": "concatentation",
      "description": "Tests for string concatenation.",
      "test": [
        {
          "name": "concat_true",
          "expr": "'he' + 'llo'",
          "value": {
            "stringValue": "hello"
          }
        },
        {
          "name": "concat_with_spaces",
          "expr": "'hello' + ' ' == 'hello'",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "concat_empty_string_beginning",
          "expr": "'' + 'abc'",
          "value": {
            "stringValue": "abc"
          }
        },
        {
          "name": "concat_empty_string_end",
          "expr": "'abc' + ''",
          "value": {
            "stringValue": "abc"
          }
        },
        {
          "name": "concat_empty_with_empty",
          "expr": "'' + ''",
          "value": {
            "stringValue": ""
          }
        },
        {
          "name": "unicode_unicode",
          "expr": "'\u00a2' + '\u00ff' + '\u0200'",
          "value": {
            "stringValue": "\u00a2\u00ff\u0200"
          }
        },
        {
          "name": "ascii_unicode",
          "expr": "'r' + '\u00f4' + 'le'",
          "value": {
            "stringValue": "r\u00f4le"
          }
        },
        {
          "name": "ascii_unicode_unicode_smp",
          "expr": "'a' + '\u00ff' + '\ud83d\udc31'",
          "value": {
            "stringValue": "a\u00ff\ud83d\udc31"
          }
        },
        {
          "name": "empty_unicode",
          "expr": "'' + '\u03a9' + ''",
          "value": {
            "stringValue": "\u03a9"
          }
        }
      ]
    },
    {
      "name": "contains",
      "description": "Tests for contains.",
      "test": [
        {
          "name": "contains_true",
          "expr": "'hello'.contains('he')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "contains_empty",
          "expr": "'hello'.contains('')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "contains_false",
          "expr": "'hello'.contains('ol')",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "contains_multiple",
          "expr": "'abababc'.contains('ababc')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "contains_unicode",
          "expr": "'Stra\u00dfe'.contains('a\u00df')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "contains_unicode_smp",
          "expr": "'\ud83d\udc31\ud83d\ude00\ud83d\ude01'.contains('\ud83d\ude00')",
          "value": {
            "boolValue": true
          }
        },
        {
          "name": "empty_contains",
          "expr": "''.contains('something')",
          "value": {
            "boolValue": false
          }
        },
        {
          "name": "empty_empty",
          "expr": "''.contains('')",
          "value": {
            "boolValue": true
          }
        }
      ]
    },
    {
      "name": "bytes_concat",
      "description": "Tests for bytes concatenation.",
      "test": [
        {
          "name": "concat",
          "expr": "b'abc' + b'def'",
          "value": {
            "bytesValue": "YWJjZGVm"
          }
        },
        {
          "name": "left_unit",
          "expr": "b'' + b'\\xffoo'",
          "value": {
            "bytesValue": "/29v"
          }
        },
        {
          "name": "right_unit",
          "expr": "b'zxy' + b''",
          "value": {
            "bytesValue": "enh5"
          }
        },
        {
          "name": "empty_empty",
          "expr": "b'' + b''",
          "value": {
            "bytesValue": ""
          }
        }
      ]
    }
  ]
}