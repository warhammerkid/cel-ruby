class Cel::Parser
  token tINT tUINT tDOUBLE tBOOL tNULL tSTRING tBYTES tIDENTIFIER
        tMULTIOP tADDOP tSUBOP tRELOP tANDOP tOROP tEOF
  prechigh
    nonassoc UMINUS
    left tMULTIOP
    left tADDOP tSUBOP
    left tRELOP
    left tANDOP
    left tOROP
  preclow
rule
  target: expr eof
        | eof
  eof: tEOF


  expr: conditional_or "?" conditional_or ":" expr { result = global_call(CONDITIONAL_OPERATOR, val[0], val[2], val[4]) }
      | conditional_or

  conditional_or: conditional_or tOROP conditional_and { result = global_call(val[1], val[0], val[2]) }
                | conditional_and

  conditional_and: conditional_and tANDOP relation { result = global_call(val[1], val[0], val[2]) }
                 | relation

  relation: relation tRELOP addition { result = global_call(val[1], val[0], val[2]) }
          | addition

  addition: addition tADDOP multiplication { result = global_call(val[1], val[0], val[2]) }
          | addition tSUBOP multiplication { result = global_call(val[1], val[0], val[2]) }
          | multiplication

  multiplication: multiplication tMULTIOP unary { result = global_call(val[1], val[0], val[2]) }
                | unary


  unary: member
       | "!" negated_member { result = global_call("!", val[1]) }
       | tSUBOP negative_member { result = global_call("-", val[1]) }

  negated_member: "!" negated_member { result = global_call("!", val[1]) }
                | member

  negative_member: tSUBOP negative_member { result = global_call("-", val[1]) }
                | member

  member: primary
        | member "." tIDENTIFIER { result = Cel::AST::Select.new(val[0], val[2]) }
        | member "." tIDENTIFIER "(" maybe_expr_list ")" { result = receiver_call(val[0], val[2], *val[4]) }
        | member "[" expr "]" { result = global_call(INDEX_OPERATOR, val[0], val[2]) }
        | member "{" maybe_field_inits "}" { result = create_message(val[0], val[2]) }


  primary:  identifier { result = Cel::AST::Identifier.new(validated_id!(val[0])) }
         |  identifier "(" maybe_expr_list ")" { result = global_call(validated_id!(val[0]), *val[2]) }
         | "(" expr ")" { result = Cel::AST::Nested.new(val[1]) }
         | "[" maybe_list_inits "]" { result = Cel::AST::CreateList.new(val[1]) }
         | "{" maybe_map_inits "}" { result = Cel::AST::CreateStruct.new("", val[1]) }
         | literal

  identifier: tIDENTIFIER
            | "." tIDENTIFIER { result = val[0] + val[1] }

  maybe_expr_list: { result = [] }
                 | expr_list

  expr_list: expr_list "," expr { result = val[0] << val[2] }
           | expr { result = [val[0]] }

  maybe_field_inits: { result = [] }
                   | field_inits
                   | field_inits "," { result = val[0] }

  field_inits: field_inits "," tIDENTIFIER ":" expr { result = val[0] << Cel::AST::Entry.new(val[2], val[4]) }
             | tIDENTIFIER ":" expr { result = [Cel::AST::Entry.new(val[0], val[2])] }

  maybe_list_inits: { result = [] }
                  | list_inits
                  | list_inits "," { result = val[0] }

  list_inits: list_inits "," expr { result = val[0] << val[2] }
            | expr { result = [val[0]] }

  maybe_map_inits: { result = [] }
                 | map_inits
                 | map_inits "," { result = val[0] }

  map_inits: map_inits "," expr ":" expr { result = val[0] << Cel::AST::Entry.new(val[2], val[4]) }
           | expr ":" expr { result = [Cel::AST::Entry.new(val[0], val[2])] }

  literal: tINT { result = int_literal(val[0]) }
         | tUINT { result = uint_literal(val[0]) }
         | tDOUBLE { result = double_literal(val[0]) }
         | tBOOL { result = Cel::AST::Literal.new(:bool, val[0]) }
         | tNULL { result = Cel::AST::Literal.new(:null, nil) }
         | tSTRING { result = string_literal(val[0]) }
         | tBYTES { result = bytes_literal(val[0]) }

end
---- header
require "strscan"
require "cel/ast"
require "cel/ast_optimizer"
require "cel/macro"
---- inner

CONDITIONAL_OPERATOR = "?:"
INDEX_OPERATOR = "[]"
LOGICAL_OPERATORS = %w[<= >= < > == != in].freeze
MULTI_OPERATORS = %w[* / %].freeze

OPERATORS = if RUBY_VERSION < "2.7.0"
  {
    "&&" => :tANDOP,
    "||" => :tOROP,
    "+" => :tADDOP,
    "-" => :tSUBOP,
  }.merge(Hash[LOGICAL_OPERATORS.map{|op| [op, :tRELOP] }])
   .merge(Hash[MULTI_OPERATORS.map{|op| [op, :tMULTIOP] }])
else
  {
    **Hash[LOGICAL_OPERATORS.map{|op| [op, :tRELOP] }],
    **Hash[MULTI_OPERATORS.map{|op| [op, :tMULTIOP] }],
    "&&" => :tANDOP,
    "||" => :tOROP,
    "+" => :tADDOP,
    "-" => :tSUBOP,
  }
end.freeze

OPERATORS_RE = Regexp.union(*OPERATORS.keys)

BACKSLASH = "\\\\" # Must be literally two backslashes for proper interpolation
DIGIT     = "[0-9]"
EXPONENT  = "(?:[eE][+-]?#{DIGIT}+)"
HEXDIGIT  = "[0-9a-fA-F]"
RAW       = "(?<raw>[rR])"

ESC_CHAR_SEQ = "#{BACKSLASH}[abfnrtv\"'#{BACKSLASH}?`]"
ESC_OCT_SEQ  = "#{BACKSLASH}[0-3][0-7]{2}"
ESC_BYTE_SEQ = "#{BACKSLASH}[xX]#{HEXDIGIT}{2}"
ESC_UNI_SEQ  = "#{BACKSLASH}u#{HEXDIGIT}{4}|#{BACKSLASH}U#{HEXDIGIT}{8}"
ESC_SEQ      = "#{ESC_CHAR_SEQ}|#{ESC_BYTE_SEQ}|#{ESC_UNI_SEQ}|#{ESC_OCT_SEQ}"

WHITESPACE_REGEX = /[ \t\r\n\u000C]+/
COMMENT_REGEX = %r{//[^\n]*}

NUM_FLOAT_REGEX = Regexp.union(
  /#{DIGIT}+\.#{DIGIT}+#{EXPONENT}?/,
  /#{DIGIT}+#{EXPONENT}/,
  /\.#{DIGIT}+#{EXPONENT}?/
)

NUM_INT_REGEX = Regexp.union(
  /0x#{HEXDIGIT}+/,
  /#{DIGIT}+/
)

NUM_UINT_REGEX = Regexp.union(
  /0x#{HEXDIGIT}+[uU]/,
  /#{DIGIT}+[uU]/
)

STRING_REGEX = Regexp.union(
  /"""(?<str>(?:#{ESC_SEQ}|[^\\])*)"""/,
  /'''(?<str>(?:#{ESC_SEQ}|[^\\])*)'''/,
  /"(?<str>(?:#{ESC_SEQ}|[^\\"\n\r])*)"/,
  /'(?<str>(?:#{ESC_SEQ}|[^\\'\n\r])*)'/,
  /#{RAW}"""(?<str>.*?)"""/m,
  /#{RAW}'''(?<str>.*?)'''/m,
  /#{RAW}"(?<str>[^"\n\r]*)"/,
  /#{RAW}'(?<str>[^'\n\r]*)'/,
)

BYTES_REGEX = /[bB]#{STRING_REGEX}/

RESERVED = %W[
as break const continue else
for function if import let
loop package namespace return
var void while
].freeze

IDENTIFIER_REGEX = /[_a-zA-Z][_a-zA-Z0-9]*/

def initialize(enable_macros: true)
  @enable_macros = enable_macros
end

def parse(str)
  tokenize(str)
  AstOptimizer.optimize!(do_parse)
rescue Racc::ParseError => err
  raise parse_error(err)
end

def parse_error(error)
  parse_error = Cel::ParseError.new(error.message)
  parse_error.set_backtrace(error.backtrace)
  parse_error
end

def tokenize(str)
  str.force_encoding(Encoding::BINARY) unless str.valid_encoding?

  scanner = StringScanner.new(str)

  @q = []

  until scanner.eos?
    case
    when scanner.scan(WHITESPACE_REGEX)
      # skip whitespace
    when scanner.scan(COMMENT_REGEX)
      # skip comment lines
    when scanner.scan(NUM_FLOAT_REGEX)
      @q << [:tDOUBLE, scanner.matched]
    when scanner.scan(NUM_UINT_REGEX)
      @q << [:tUINT, scanner.matched]
    when scanner.scan(NUM_INT_REGEX)
      @q << [:tINT, scanner.matched]
    when scanner.scan(STRING_REGEX)
      @q << [:tSTRING, { raw: scanner[:raw], str: scanner[:str] }]
    when scanner.scan(BYTES_REGEX)
      @q << [:tBYTES, { raw: scanner[:raw], str: scanner[:str] }]
    when scanner.scan(IDENTIFIER_REGEX)
      word = scanner.matched
      if word == "null"
        @q << [:tNULL, nil]
      elsif word == "true"
        @q << [:tBOOL, true]
      elsif word == "false"
        @q << [:tBOOL, false]
      elsif word == "in"
        @q << [OPERATORS[scanner.matched], scanner.matched]
      else
        @q << [:tIDENTIFIER, scanner.matched]
      end
    when scanner.scan(OPERATORS_RE)
      @q << [OPERATORS[scanner.matched], scanner.matched]
    when scanner.scan(/\A.|\n/o)
      s = scanner.matched
      @q << [s, s]
    else
      raise ParseError, "unexpected value: #{scanner.string}"
    end
  end
  @q << [:tEOF, false]
end

def next_token
  @q.shift
end

def int_literal(str)
  base = 10
  if str.start_with?("0x")
    base = 16
    str = str[2..]
  end
  Cel::AST::Literal.new(:int, str.to_i(base))
end

def uint_literal(str)
  base = 10
  if str.start_with?("0x")
    base = 16
    str = str[2..]
  end
  Cel::AST::Literal.new(:uint, str.to_i(base))
end

def double_literal(str)
  Cel::AST::Literal.new(:double, Float(str))
end

def string_literal(parts)
  string = convert_to_string(parts[:raw], parts[:str])
  Cel::AST::Literal.new(:string, string.encode("UTF-8", invalid: :replace, undef: :replace))
end

def bytes_literal(parts)
  string = convert_to_string(parts[:raw], parts[:str])
  Cel::AST::Literal.new(:bytes, string.unpack("C*"))
end

def global_call(function, *args)
  node = Cel::Macro.rewrite_global(function, args) if @enable_macros
  node || Cel::AST::Call.new(nil, function, args)
end

def receiver_call(target, function, *args)
  node = Cel::Macro.rewrite_receiver(target, function, args) if @enable_macros
  node || Cel::AST::Call.new(target, function, args)
end

def create_message(message_name, entries)
  # The message name will be either an Identifer or chain of Select nodes. We
  # want to convert this to a single string.
  parts = []
  while message_name.is_a?(Cel::AST::Select)
    parts.unshift(message_name.field)
    message_name = message_name.operand
  end
  parts.unshift(message_name.name)

  Cel::AST::CreateStruct.new(parts.join("."), entries)
end

CHAR_SEQ_MAP = {
  "\\a" => "\a",
  "\\b" => "\b",
  "\\f" => "\f",
  "\\n" => "\n",
  "\\r" => "\r",
  "\\t" => "\t",
  "\\v" => "\v",
  "\\\"" => "\"",
  "\\'" => "'",
  "\\\\" => "\\",
  "\\?" => "?",
  "\\`" => "`",
}.freeze
ESC_SEQ_REGEX = /#{ESC_SEQ}/
def convert_to_string(raw, str)
  # Raw strings do not interpret escape sequences
  return str if raw

  # Parse and convert all escape sequences
  str.gsub(ESC_SEQ_REGEX) do |match|
    case match[1]
    when "0", "1", "2", "3"
      # Octal sequence - ESC_OCT_SEQ
      match[1..].to_i(8).chr
    when "x", "X"
      # Hex sequence - ESC_BYTE_SEQ
      match[2..].to_i(16).chr
    when "u", "U"
      # Unicode escape sequence - ESC_UNI_SEQ
      [match[2..].to_i(16)].pack('U')
    else
      # Char escape sequence - ESC_CHAR_SEQ
      CHAR_SEQ_MAP.fetch(match)
    end
  end
end

# Checks whether the given identifier token is a reserved word or not. Throws
# a ParseError if it's a reserved word.
def validated_id!(identifier)
  return identifier unless RESERVED.include?(identifier)

  raise Cel::ParseError.new("invalid usage of the reserved word \"#{identifier}\"")
end
