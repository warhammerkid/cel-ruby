#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.ry".
#

require 'racc/parser.rb'

require "strscan"
require "cel/ast"
require "cel/ast_optimizer"
require "cel/macro"
module Cel
  class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 107)

CONDITIONAL_OPERATOR = "?:"
INDEX_OPERATOR = "[]"
LOGICAL_OPERATORS = %w[<= >= < > == != in].freeze
MULTI_OPERATORS = %w[* / %].freeze

OPERATORS = if RUBY_VERSION < "2.7.0"
  {
    "&&" => :tANDOP,
    "||" => :tOROP,
    "+" => :tADDOP,
    "-" => :tSUBOP,
  }.merge(Hash[LOGICAL_OPERATORS.map{|op| [op, :tRELOP] }])
   .merge(Hash[MULTI_OPERATORS.map{|op| [op, :tMULTIOP] }])
else
  {
    **Hash[LOGICAL_OPERATORS.map{|op| [op, :tRELOP] }],
    **Hash[MULTI_OPERATORS.map{|op| [op, :tMULTIOP] }],
    "&&" => :tANDOP,
    "||" => :tOROP,
    "+" => :tADDOP,
    "-" => :tSUBOP,
  }
end.freeze

OPERATORS_RE = Regexp.union(*OPERATORS.keys)

BACKSLASH = "\\\\" # Must be literally two backslashes for proper interpolation
DIGIT     = "[0-9]"
EXPONENT  = "(?:[eE][+-]?#{DIGIT}+)"
HEXDIGIT  = "[0-9a-fA-F]"
RAW       = "(?<raw>[rR])"

ESC_CHAR_SEQ = "#{BACKSLASH}[abfnrtv\"'#{BACKSLASH}?`]"
ESC_OCT_SEQ  = "#{BACKSLASH}[0-3][0-7]{2}"
ESC_BYTE_SEQ = "#{BACKSLASH}[xX]#{HEXDIGIT}{2}"
ESC_UNI_SEQ  = "#{BACKSLASH}u#{HEXDIGIT}{4}|#{BACKSLASH}U#{HEXDIGIT}{8}"
ESC_SEQ      = "#{ESC_CHAR_SEQ}|#{ESC_BYTE_SEQ}|#{ESC_UNI_SEQ}|#{ESC_OCT_SEQ}"

WHITESPACE_REGEX = /[ \t\r\n\u000C]+/
COMMENT_REGEX = %r{//[^\n]*}

NUM_FLOAT_REGEX = Regexp.union(
  /#{DIGIT}+\.#{DIGIT}+#{EXPONENT}?/,
  /#{DIGIT}+#{EXPONENT}/,
  /\.#{DIGIT}+#{EXPONENT}?/
)

NUM_INT_REGEX = Regexp.union(
  /0x#{HEXDIGIT}+/,
  /#{DIGIT}+/
)

NUM_UINT_REGEX = Regexp.union(
  /0x#{HEXDIGIT}+[uU]/,
  /#{DIGIT}+[uU]/
)

STRING_REGEX = Regexp.union(
  /"""(?<str>(?:#{ESC_SEQ}|[^\\])*)"""/,
  /'''(?<str>(?:#{ESC_SEQ}|[^\\])*)'''/,
  /"(?<str>(?:#{ESC_SEQ}|[^\\"\n\r])*)"/,
  /'(?<str>(?:#{ESC_SEQ}|[^\\'\n\r])*)'/,
  /#{RAW}"""(?<str>.*?)"""/m,
  /#{RAW}'''(?<str>.*?)'''/m,
  /#{RAW}"(?<str>[^"\n\r]*)"/,
  /#{RAW}'(?<str>[^'\n\r]*)'/,
)

BYTES_REGEX = /[bB]#{STRING_REGEX}/

RESERVED = %W[
as break const continue else
for function if import let
loop package namespace return
var void while
].freeze

IDENTIFIER_REGEX = /[_a-zA-Z][_a-zA-Z0-9]*/

def initialize(enable_macros: true)
  @enable_macros = enable_macros
end

def parse(str)
  tokenize(str)
  AstOptimizer.optimize!(do_parse)
rescue Racc::ParseError => err
  raise parse_error(err)
end

def parse_error(error)
  parse_error = Cel::ParseError.new(error.message)
  parse_error.set_backtrace(error.backtrace)
  parse_error
end

def tokenize(str)
  str.force_encoding(Encoding::BINARY) unless str.valid_encoding?

  scanner = StringScanner.new(str)

  @q = []

  until scanner.eos?
    case
    when scanner.scan(WHITESPACE_REGEX)
      # skip whitespace
    when scanner.scan(COMMENT_REGEX)
      # skip comment lines
    when scanner.scan(NUM_FLOAT_REGEX)
      @q << [:tDOUBLE, scanner.matched]
    when scanner.scan(NUM_UINT_REGEX)
      @q << [:tUINT, scanner.matched]
    when scanner.scan(NUM_INT_REGEX)
      @q << [:tINT, scanner.matched]
    when scanner.scan(STRING_REGEX)
      @q << [:tSTRING, { raw: scanner[:raw], str: scanner[:str] }]
    when scanner.scan(BYTES_REGEX)
      @q << [:tBYTES, { raw: scanner[:raw], str: scanner[:str] }]
    when scanner.scan(IDENTIFIER_REGEX)
      word = scanner.matched
      if word == "null"
        @q << [:tNULL, nil]
      elsif word == "true"
        @q << [:tBOOL, true]
      elsif word == "false"
        @q << [:tBOOL, false]
      elsif word == "in"
        @q << [OPERATORS[scanner.matched], scanner.matched]
      else
        @q << [:tIDENTIFIER, scanner.matched]
      end
    when scanner.scan(OPERATORS_RE)
      @q << [OPERATORS[scanner.matched], scanner.matched]
    when scanner.scan(/\A.|\n/o)
      s = scanner.matched
      @q << [s, s]
    else
      raise ParseError, "unexpected value: #{scanner.string}"
    end
  end
  @q << [:tEOF, false]
end

def next_token
  @q.shift
end

def int_literal(str)
  base = 10
  if str.start_with?("0x")
    base = 16
    str = str[2..]
  end
  Cel::AST::Literal.new(:int, str.to_i(base))
end

def uint_literal(str)
  base = 10
  if str.start_with?("0x")
    base = 16
    str = str[2..]
  end
  Cel::AST::Literal.new(:uint, str.to_i(base))
end

def double_literal(str)
  Cel::AST::Literal.new(:double, Float(str))
end

def string_literal(parts)
  Cel::AST::Literal.new(:string, convert_to_string(parts[:raw], parts[:str]))
end

def bytes_literal(parts)
  string = convert_to_string(parts[:raw], parts[:str])
  Cel::AST::Literal.new(:bytes, string.unpack("C*"))
end

def global_call(function, *args)
  node = Cel::Macro.rewrite_global(function, args) if @enable_macros
  node || Cel::AST::Call.new(nil, function, args)
end

def receiver_call(target, function, *args)
  Cel::AST::Call.new(target, function, args)
end

def create_message(message_name, entries)
  # The message name will be either an Identifer or chain of Select nodes. We
  # want to convert this to a single string.
  parts = []
  while message_name.is_a?(Cel::AST::Select)
    parts.unshift(message_name.field)
    message_name = message_name.operand
  end
  parts.unshift(message_name.name)

  Cel::AST::CreateStruct.new(parts.join("."), entries)
end

CHAR_SEQ_MAP = {
  "\\a" => "\a",
  "\\b" => "\b",
  "\\f" => "\f",
  "\\n" => "\n",
  "\\r" => "\r",
  "\\t" => "\t",
  "\\v" => "\v",
  "\\\"" => "\"",
  "\\'" => "'",
  "\\\\" => "\\",
  "\\?" => "?",
  "\\`" => "`",
}.freeze
ESC_SEQ_REGEX = /#{ESC_SEQ}/
def convert_to_string(raw, str)
  # Raw strings do not interpret escape sequences
  return str if raw

  # Parse and convert all escape sequences
  str.gsub(ESC_SEQ_REGEX) do |match|
    case match[1]
    when "0", "1", "2", "3"
      # Octal sequence - ESC_OCT_SEQ
      match[1..].to_i(8).chr
    when "x", "X"
      # Hex sequence - ESC_BYTE_SEQ
      match[2..].to_i(16).chr
    when "u", "U"
      # Unicode escape sequence - ESC_UNI_SEQ
      [match[2..].to_i(16)].pack('U')
    else
      # Char escape sequence - ESC_CHAR_SEQ
      CHAR_SEQ_MAP.fetch(match)
    end
  end
end

# Checks whether the given identifier token is a reserved word or not. Throws
# a ParseError if it's a reserved word.
def validated_id!(identifier)
  return identifier unless RESERVED.include?(identifier)

  raise Cel::ParseError.new("invalid usage of the reserved word \"#{identifier}\"")
end
...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    22,    23,    24,    25,    26,    27,    28,    20,    38,    29,
    13,    39,    38,    40,     4,    39,     4,    40,    12,    21,
    16,    33,    17,    34,    18,    22,    23,    24,    25,    26,
    27,    28,    20,    38,    32,    32,    39,    31,    40,    80,
    35,    36,    37,    42,    21,    16,    47,    17,    55,    18,
    22,    23,    24,    25,    26,    27,    28,    20,    35,    36,
    45,    22,    23,    24,    25,    26,    27,    28,    20,    21,
    16,    13,    17,    56,    18,    64,    68,    74,    75,    12,
    21,    16,    76,    17,    77,    18,    22,    23,    24,    25,
    26,    27,    28,    20,    78,    79,    13,    33,    34,    37,
    37,    81,    82,    83,    12,    21,    16,    84,    17,    85,
    18,    22,    23,    24,    25,    26,    27,    28,    20,    86,
    87,    13,    93,    96,    97,    98,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    45,    22,    23,    24,    25,    26,    27,    28,    20,
    21,    16,    13,    17,   nil,    18,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     0,     0,    11,     1,
     0,    11,    43,    11,     0,    43,     2,    43,     0,     0,
     0,     6,     0,     7,     0,    12,    12,    12,    12,    12,
    12,    12,    12,    46,     5,    57,    46,     5,    46,    57,
     8,     8,     9,    12,    12,    12,    15,    12,    21,    12,
    13,    13,    13,    13,    13,    13,    13,    13,    60,    60,
    13,    16,    16,    16,    16,    16,    16,    16,    16,    13,
    13,    16,    13,    29,    13,    38,    40,    48,    49,    16,
    16,    16,    50,    16,    52,    16,    17,    17,    17,    17,
    17,    17,    17,    17,    53,    54,    17,    58,    59,    61,
    62,    64,    65,    66,    17,    17,    17,    67,    17,    68,
    17,    18,    18,    18,    18,    18,    18,    18,    18,    71,
    72,    18,    84,    89,    92,    93,   nil,   nil,   nil,    18,
    18,    18,   nil,    18,   nil,    18,    31,    31,    31,    31,
    31,    31,    31,    31,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,    31,    31,   nil,    31,   nil,
    31,    32,    32,    32,    32,    32,    32,    32,    32,   nil,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
    32,    32,   nil,    32,   nil,    32,    33,    33,    33,    33,
    33,    33,    33,    33,   nil,   nil,    33,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33,    33,    33,   nil,    33,   nil,
    33,    34,    34,    34,    34,    34,    34,    34,    34,   nil,
   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,
    34,    34,   nil,    34,   nil,    34,    35,    35,    35,    35,
    35,    35,    35,    35,   nil,   nil,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    35,    35,    35,   nil,    35,   nil,
    35,    36,    36,    36,    36,    36,    36,    36,    36,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
    36,    36,   nil,    36,   nil,    36,    37,    37,    37,    37,
    37,    37,    37,    37,   nil,   nil,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    37,    37,   nil,    37,   nil,
    37,    39,    39,    39,    39,    39,    39,    39,    39,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    39,    39,   nil,    39,   nil,    39,    42,    42,    42,    42,
    42,    42,    42,    42,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,    42,    42,   nil,    42,   nil,
    42,    45,    45,    45,    45,    45,    45,    45,    45,   nil,
   nil,    45,    47,    47,    47,    47,    47,    47,    47,    47,
    45,    45,    47,    45,   nil,    45,   nil,   nil,   nil,   nil,
    47,    47,    47,   nil,    47,   nil,    47,    76,    76,    76,
    76,    76,    76,    76,    76,   nil,   nil,    76,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    76,    76,    76,   nil,    76,
   nil,    76,    78,    78,    78,    78,    78,    78,    78,    78,
   nil,   nil,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    78,    78,    78,   nil,    78,   nil,    78,    79,    79,    79,
    79,    79,    79,    79,    79,   nil,   nil,    79,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    79,    79,    79,   nil,    79,
   nil,    79,    80,    80,    80,    80,    80,    80,    80,    80,
   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    80,    80,    80,   nil,    80,   nil,    80,    81,    81,    81,
    81,    81,    81,    81,    81,   nil,   nil,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    81,    81,    81,   nil,    81,
   nil,    81,    85,    85,    85,    85,    85,    85,    85,    85,
   nil,   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    85,    85,    85,   nil,    85,   nil,    85,    87,    87,    87,
    87,    87,    87,    87,    87,   nil,   nil,    87,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    87,    87,    87,   nil,    87,
   nil,    87,    96,    96,    96,    96,    96,    96,    96,    96,
   nil,   nil,    96,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    96,    96,    96,   nil,    96,   nil,    96,    98,    98,    98,
    98,    98,    98,    98,    98,   nil,   nil,    98,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    98,    98,    98,   nil,    98,
   nil,    98 ]

racc_action_pointer = [
    -2,     9,     0,   nil,   nil,    19,     7,    10,    29,    32,
   nil,   -13,    23,    48,   nil,    24,    59,    84,   109,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    73,
   nil,   134,   159,   184,   209,   234,   259,   284,    66,   309,
    67,   nil,   334,    -9,   nil,   359,    12,   370,    54,    53,
    54,   nil,    57,    66,    76,   nil,   nil,    20,    83,    85,
    47,    89,    90,   nil,    79,    77,    76,    79,    90,   nil,
   nil,    96,    92,   nil,   nil,   nil,   395,   nil,   420,   445,
   470,   495,   nil,   nil,   113,   520,   nil,   545,   nil,   104,
   nil,   nil,   101,   106,   nil,   nil,   570,   nil,   595,   nil,
   nil ]

racc_action_default = [
   -63,   -63,   -63,    -2,    -3,    -5,    -7,    -9,   -11,   -14,
   -16,   -17,   -63,   -63,   -24,   -29,   -63,   -46,   -51,   -34,
   -35,   -63,   -56,   -57,   -58,   -59,   -60,   -61,   -62,   -63,
    -1,   -63,   -63,   -63,   -63,   -63,   -63,   -63,   -63,   -63,
   -41,   -18,   -63,   -21,   -19,   -63,   -23,   -37,   -63,   -63,
   -47,   -50,   -63,   -52,   -63,   -36,   101,   -63,    -6,    -8,
   -10,   -12,   -13,   -15,   -25,   -63,   -63,   -42,   -63,   -20,
   -22,   -63,   -38,   -40,   -31,   -32,   -48,   -33,   -53,   -63,
   -63,   -37,   -27,   -28,   -43,   -63,   -30,   -63,   -49,   -63,
   -55,    -4,   -63,   -63,   -45,   -39,   -63,   -26,   -63,   -54,
   -44 ]

racc_goto_table = [
     2,    71,    44,    43,    46,     1,     3,    41,    30,    61,
    62,    57,    58,    59,    60,    63,    48,    51,    54,    66,
    49,    52,    67,    50,    53,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    70,    92,    46,    69,   nil,    65,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    88,   nil,    89,    90,
    91,   nil,   nil,   nil,   nil,    94,   nil,    95,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    99,   nil,   100 ]

racc_goto_check = [
     2,    14,    12,    10,    10,     1,     3,    11,     3,     8,
     8,     4,     5,     6,     7,     9,     2,     2,     2,    15,
    17,    18,    21,    22,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    12,    14,    10,    11,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2,
     2,   nil,   nil,   nil,   nil,     2,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2 ]

racc_goto_pointer = [
   nil,     5,     0,     6,   -20,   -20,   -20,   -20,   -26,   -22,
    -9,    -5,   -11,   nil,   -46,   -21,   nil,     3,     3,   nil,
   nil,   -18,     6,     6 ]

racc_goto_default = [
   nil,   nil,    73,   nil,     5,     6,     7,     8,     9,    10,
    11,   nil,   nil,    14,   nil,   nil,    15,   nil,   nil,    19,
    72,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 32, :_reduce_none,
  5, 31, :_reduce_4,
  1, 31, :_reduce_none,
  3, 33, :_reduce_6,
  1, 33, :_reduce_none,
  3, 34, :_reduce_8,
  1, 34, :_reduce_none,
  3, 35, :_reduce_10,
  1, 35, :_reduce_none,
  3, 36, :_reduce_12,
  3, 36, :_reduce_13,
  1, 36, :_reduce_none,
  3, 37, :_reduce_15,
  1, 37, :_reduce_none,
  1, 38, :_reduce_none,
  2, 38, :_reduce_18,
  2, 38, :_reduce_19,
  2, 40, :_reduce_20,
  1, 40, :_reduce_none,
  2, 41, :_reduce_22,
  1, 41, :_reduce_none,
  1, 39, :_reduce_none,
  3, 39, :_reduce_25,
  6, 39, :_reduce_26,
  4, 39, :_reduce_27,
  4, 39, :_reduce_28,
  1, 42, :_reduce_29,
  4, 42, :_reduce_30,
  3, 42, :_reduce_31,
  3, 42, :_reduce_32,
  3, 42, :_reduce_33,
  1, 42, :_reduce_none,
  1, 45, :_reduce_none,
  2, 45, :_reduce_36,
  0, 43, :_reduce_37,
  1, 43, :_reduce_none,
  3, 49, :_reduce_39,
  1, 49, :_reduce_40,
  0, 44, :_reduce_41,
  1, 44, :_reduce_none,
  2, 44, :_reduce_43,
  5, 50, :_reduce_44,
  3, 50, :_reduce_45,
  0, 46, :_reduce_46,
  1, 46, :_reduce_none,
  2, 46, :_reduce_48,
  3, 51, :_reduce_49,
  1, 51, :_reduce_50,
  0, 47, :_reduce_51,
  1, 47, :_reduce_none,
  2, 47, :_reduce_53,
  5, 52, :_reduce_54,
  3, 52, :_reduce_55,
  1, 48, :_reduce_56,
  1, 48, :_reduce_57,
  1, 48, :_reduce_58,
  1, 48, :_reduce_59,
  1, 48, :_reduce_60,
  1, 48, :_reduce_61,
  1, 48, :_reduce_62 ]

racc_reduce_n = 63

racc_shift_n = 101

racc_token_table = {
  false => 0,
  :error => 1,
  :tINT => 2,
  :tUINT => 3,
  :tDOUBLE => 4,
  :tBOOL => 5,
  :tNULL => 6,
  :tSTRING => 7,
  :tBYTES => 8,
  :tIDENTIFIER => 9,
  :tMULTIOP => 10,
  :tADDOP => 11,
  :tSUBOP => 12,
  :tRELOP => 13,
  :tANDOP => 14,
  :tOROP => 15,
  :tEOF => 16,
  :UMINUS => 17,
  "?" => 18,
  ":" => 19,
  "!" => 20,
  "." => 21,
  "(" => 22,
  ")" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "tINT",
  "tUINT",
  "tDOUBLE",
  "tBOOL",
  "tNULL",
  "tSTRING",
  "tBYTES",
  "tIDENTIFIER",
  "tMULTIOP",
  "tADDOP",
  "tSUBOP",
  "tRELOP",
  "tANDOP",
  "tOROP",
  "tEOF",
  "UMINUS",
  "\"?\"",
  "\":\"",
  "\"!\"",
  "\".\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "$start",
  "target",
  "expr",
  "eof",
  "conditional_or",
  "conditional_and",
  "relation",
  "addition",
  "multiplication",
  "unary",
  "member",
  "negated_member",
  "negative_member",
  "primary",
  "maybe_expr_list",
  "maybe_field_inits",
  "identifier",
  "maybe_list_inits",
  "maybe_map_inits",
  "literal",
  "expr_list",
  "field_inits",
  "list_inits",
  "map_inits" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.ry', 17)
  def _reduce_4(val, _values, result)
     result = global_call(CONDITIONAL_OPERATOR, val[0], val[2], val[4])
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.ry', 20)
  def _reduce_6(val, _values, result)
     result = global_call(val[1], val[0], val[2])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.ry', 23)
  def _reduce_8(val, _values, result)
     result = global_call(val[1], val[0], val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.ry', 26)
  def _reduce_10(val, _values, result)
     result = global_call(val[1], val[0], val[2])
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.ry', 29)
  def _reduce_12(val, _values, result)
     result = global_call(val[1], val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 30)
  def _reduce_13(val, _values, result)
     result = global_call(val[1], val[0], val[2])
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.ry', 33)
  def _reduce_15(val, _values, result)
     result = global_call(val[1], val[0], val[2])
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_18(val, _values, result)
     result = global_call("!", val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 39)
  def _reduce_19(val, _values, result)
     result = global_call("-", val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 41)
  def _reduce_20(val, _values, result)
     result = global_call("!", val[1])
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.ry', 44)
  def _reduce_22(val, _values, result)
     result = global_call("-", val[1])
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.ry', 48)
  def _reduce_25(val, _values, result)
     result = Cel::AST::Select.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 49)
  def _reduce_26(val, _values, result)
     result = receiver_call(val[0], val[2], *val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_27(val, _values, result)
     result = global_call(INDEX_OPERATOR, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 51)
  def _reduce_28(val, _values, result)
     result = create_message(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 54)
  def _reduce_29(val, _values, result)
     result = Cel::AST::Identifier.new(validated_id!(val[0]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 55)
  def _reduce_30(val, _values, result)
     result = global_call(validated_id!(val[0]), *val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_31(val, _values, result)
     result = Cel::AST::Nested.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 57)
  def _reduce_32(val, _values, result)
     result = Cel::AST::CreateList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_33(val, _values, result)
     result = Cel::AST::CreateStruct.new("", val[1])
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.ry', 62)
  def _reduce_36(val, _values, result)
     result = val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_37(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.ry', 67)
  def _reduce_39(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 68)
  def _reduce_40(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_41(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.ry', 72)
  def _reduce_43(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 74)
  def _reduce_44(val, _values, result)
     result = val[0] << Cel::AST::Entry.new(val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 75)
  def _reduce_45(val, _values, result)
     result = [Cel::AST::Entry.new(val[0], val[2])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 77)
  def _reduce_46(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.ry', 79)
  def _reduce_48(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 81)
  def _reduce_49(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 82)
  def _reduce_50(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 84)
  def _reduce_51(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.ry', 86)
  def _reduce_53(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 88)
  def _reduce_54(val, _values, result)
     result = val[0] << Cel::AST::Entry.new(val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 89)
  def _reduce_55(val, _values, result)
     result = [Cel::AST::Entry.new(val[0], val[2])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 91)
  def _reduce_56(val, _values, result)
     result = int_literal(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 92)
  def _reduce_57(val, _values, result)
     result = uint_literal(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 93)
  def _reduce_58(val, _values, result)
     result = double_literal(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 94)
  def _reduce_59(val, _values, result)
     result = Cel::AST::Literal.new(:bool, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 95)
  def _reduce_60(val, _values, result)
     result = Cel::AST::Literal.new(:null, nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 96)
  def _reduce_61(val, _values, result)
     result = string_literal(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 97)
  def _reduce_62(val, _values, result)
     result = bytes_literal(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Cel
