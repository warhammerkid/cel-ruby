#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.ry".
#

require 'racc/parser.rb'

require 'strscan'
require 'bigdecimal'
require 'cel/ast/elements'
module Cel
  class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 97)



OPERATORS = if RUBY_VERSION < "2.7.0"
  {
    "&&" => :tANDOP,
    "||" => :tOROP,
    "+" => :tADDOP,
    "-" => :tSUBOP,
  }.merge(Hash[Cel::LOGICAL_OPERATORS.map{|op| [op, :tRELOP] }])
   .merge(Hash[Cel::MULTI_OPERATORS.map{|op| [op, :tMULTIOP] }])
else
  {
    **Hash[Cel::LOGICAL_OPERATORS.map{|op| [op, :tRELOP] }],
    **Hash[Cel::MULTI_OPERATORS.map{|op| [op, :tMULTIOP] }],
    "&&" => :tANDOP,
    "||" => :tOROP,
    "+" => :tADDOP,
    "-" => :tSUBOP,
  }
end.freeze

OPERATORS_RE = Regexp.union(*OPERATORS.keys)

BACKSLASH = "\\\\" # Must be literally two backslashes for proper interpolation
DIGIT     = "[0-9]"
EXPONENT  = "(?:[eE][+-]?#{DIGIT}+)"
HEXDIGIT  = "[0-9a-fA-F]"
RAW       = "(?<raw>[rR])"

ESC_CHAR_SEQ = "#{BACKSLASH}[abfnrtv\"'#{BACKSLASH}?`]"
ESC_OCT_SEQ  = "#{BACKSLASH}[0-3][0-7]{2}"
ESC_BYTE_SEQ = "#{BACKSLASH}[xX]#{HEXDIGIT}{2}"
ESC_UNI_SEQ  = "#{BACKSLASH}u#{HEXDIGIT}{4}|#{BACKSLASH}U#{HEXDIGIT}{8}"
ESC_SEQ      = "#{ESC_CHAR_SEQ}|#{ESC_BYTE_SEQ}|#{ESC_UNI_SEQ}|#{ESC_OCT_SEQ}"

WHITESPACE_REGEX = /[ \t\r\n\u000C]+/
COMMENT_REGEX = %r{//[^\n]*}

NUM_FLOAT_REGEX = Regexp.union(
  /#{DIGIT}+\.#{DIGIT}+#{EXPONENT}?/,
  /#{DIGIT}+#{EXPONENT}/,
  /\.#{DIGIT}+#{EXPONENT}?/
)

NUM_INT_REGEX = Regexp.union(
  /0x(?<hex>#{HEXDIGIT}+)/,
  /(?<dec>#{DIGIT}+)/
)

NUM_UINT_REGEX = Regexp.union(
  /0x(?<hex>#{HEXDIGIT}+)[uU]/,
  /(?<dec>#{DIGIT}+)[uU]/
)

STRING_REGEX = Regexp.union(
  /"""(?<str>(?:#{ESC_SEQ}|[^\\])*)"""/,
  /'''(?<str>(?:#{ESC_SEQ}|[^\\])*)'''/,
  /"(?<str>(?:#{ESC_SEQ}|[^\\"\n\r])*)"/,
  /'(?<str>(?:#{ESC_SEQ}|[^\\'\n\r])*)'/,
  /#{RAW}"""(?<str>.*?)"""/m,
  /#{RAW}'''(?<str>.*?)'''/m,
  /#{RAW}"(?<str>[^"\n\r]*)"/,
  /#{RAW}'(?<str>[^'\n\r]*)'/,
)

BYTES_REGEX = /[bB]#{STRING_REGEX}/

RESERVED = %W[
as break const continue else
for function if import let
loop package namespace return
var void while
].freeze

IDENTIFIER_REGEX = /[_a-zA-Z][_a-zA-Z0-9]*/

def parse(str)
  tokenize(str)
  do_parse
rescue Racc::ParseError => err
  raise parse_error(err)
end

def parse_error(error)
  parse_error = Cel::ParseError.new(error.message)
  parse_error.set_backtrace(error.backtrace)
  parse_error
end

def tokenize(str)
  str.force_encoding(Encoding::BINARY) unless str.valid_encoding?

  scanner = StringScanner.new(str)

  @q = []

  until scanner.eos?
    case
    when scanner.scan(WHITESPACE_REGEX)
      # skip whitespace
    when scanner.scan(COMMENT_REGEX)
      # skip comment lines
    when scanner.scan(NUM_FLOAT_REGEX)
      @q << [:tDOUBLE, Float(scanner.matched)]
    when scanner.scan(NUM_UINT_REGEX)
      @q << [:tUINT, scanner[:hex] ? scanner[:hex].to_i(16) : scanner[:dec].to_i]
    when scanner.scan(NUM_INT_REGEX)
      @q << [:tINT, scanner[:hex] ? scanner[:hex].to_i(16) : scanner[:dec].to_i]
    when scanner.scan(STRING_REGEX)
      @q << [:tSTRING, convert_to_string(scanner[:raw], scanner[:str])]
    when scanner.scan(BYTES_REGEX)
      str = convert_to_string(scanner[:raw], scanner[:str])
      @q << [:tBYTES, convert_to_bytes(str)]
    when scanner.scan(IDENTIFIER_REGEX)
      word = scanner.matched
      if word == "null"
        @q << [:tNULL, nil]
      elsif word == "true"
        @q << [:tBOOL, true]
      elsif word == "false"
        @q << [:tBOOL, false]
      elsif word == "in"
        @q << [OPERATORS[scanner.matched], scanner.matched]
      else
        @q << [:tIDENTIFIER, scanner.matched]
      end
    when scanner.scan(OPERATORS_RE)
      @q << [OPERATORS[scanner.matched], scanner.matched]
    when scanner.scan(/\A.|\n/o)
      s = scanner.matched
      @q << [s, s]
    else
      raise ParseError, "unexpected value: #{scanner.string}"
    end
  end
  @q << [:tEOF, false]
end

def next_token
  @q.shift
end

CHAR_SEQ_MAP = {
  "\\a" => "\a",
  "\\b" => "\b",
  "\\f" => "\f",
  "\\n" => "\n",
  "\\r" => "\r",
  "\\t" => "\t",
  "\\v" => "\v",
  "\\\"" => "\"",
  "\\'" => "'",
  "\\\\" => "\\",
  "\\?" => "?",
  "\\`" => "`",
}.freeze
ESC_SEQ_REGEX = /#{ESC_SEQ}/
def convert_to_string(raw, str)
  # Raw strings do not interpret escape sequences
  return str if raw

  # Parse and convert all escape sequences
  str.gsub(ESC_SEQ_REGEX) do |match|
    case match[1]
    when "0", "1", "2", "3"
      # Octal sequence - ESC_OCT_SEQ
      match[1..].to_i(8).chr
    when "x", "X"
      # Hex sequence - ESC_BYTE_SEQ
      match[2..].to_i(16).chr
    when "u", "U"
      # Unicode escape sequence - ESC_UNI_SEQ
      [match[2..].to_i(16)].pack('U')
    else
      # Char escape sequence - ESC_CHAR_SEQ
      CHAR_SEQ_MAP.fetch(match)
    end
  end
end

def convert_to_bytes(str)
  str.unpack("C*")
end

# Checks whether the given identifier token is a reserved word or not. Throws
# a ParseError if it's a reserved word.
def validated_id!(identifier)
  return identifier unless RESERVED.include?(identifier)

  raise Cel::ParseError.new("invalid usage of the reserved word \"#{identifier}\"")
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    22,    23,    24,    25,    26,    27,    28,    20,    38,    29,
    13,    39,    38,    40,     4,    39,     4,    40,    12,    21,
    16,    33,    17,    34,    18,    22,    23,    24,    25,    26,
    27,    28,    20,    38,    32,    32,    39,    31,    40,    78,
    35,    36,    37,    42,    21,    16,    47,    17,    55,    18,
    22,    23,    24,    25,    26,    27,    28,    20,    35,    36,
    45,    22,    23,    24,    25,    26,    27,    28,    20,    21,
    16,    13,    17,    56,    18,    64,    68,    72,    73,    12,
    21,    16,    74,    17,    75,    18,    22,    23,    24,    25,
    26,    27,    28,    20,    76,    77,    13,    33,    34,    37,
    37,    79,    80,    81,    12,    21,    16,    82,    17,    83,
    18,    22,    23,    24,    25,    26,    27,    28,    20,    84,
    90,    13,    92,    93,    94,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    20,   nil,
   nil,    45,    22,    23,    24,    25,    26,    27,    28,    20,
    21,    16,    13,    17,   nil,    18,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18,    22,    23,    24,
    25,    26,    27,    28,    20,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    21,    16,   nil,    17,
   nil,    18,    22,    23,    24,    25,    26,    27,    28,    20,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    21,    16,   nil,    17,   nil,    18 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     0,     0,    11,     1,
     0,    11,    43,    11,     0,    43,     2,    43,     0,     0,
     0,     6,     0,     7,     0,    12,    12,    12,    12,    12,
    12,    12,    12,    46,     5,    57,    46,     5,    46,    57,
     8,     8,     9,    12,    12,    12,    15,    12,    21,    12,
    13,    13,    13,    13,    13,    13,    13,    13,    60,    60,
    13,    16,    16,    16,    16,    16,    16,    16,    16,    13,
    13,    16,    13,    29,    13,    38,    40,    48,    49,    16,
    16,    16,    50,    16,    52,    16,    17,    17,    17,    17,
    17,    17,    17,    17,    53,    54,    17,    58,    59,    61,
    62,    64,    65,    66,    17,    17,    17,    67,    17,    68,
    17,    18,    18,    18,    18,    18,    18,    18,    18,    71,
    82,    18,    86,    89,    90,   nil,   nil,   nil,   nil,    18,
    18,    18,   nil,    18,   nil,    18,    31,    31,    31,    31,
    31,    31,    31,    31,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,    31,    31,   nil,    31,   nil,
    31,    32,    32,    32,    32,    32,    32,    32,    32,   nil,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
    32,    32,   nil,    32,   nil,    32,    33,    33,    33,    33,
    33,    33,    33,    33,   nil,   nil,    33,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33,    33,    33,   nil,    33,   nil,
    33,    34,    34,    34,    34,    34,    34,    34,    34,   nil,
   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,
    34,    34,   nil,    34,   nil,    34,    35,    35,    35,    35,
    35,    35,    35,    35,   nil,   nil,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    35,    35,    35,   nil,    35,   nil,
    35,    36,    36,    36,    36,    36,    36,    36,    36,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
    36,    36,   nil,    36,   nil,    36,    37,    37,    37,    37,
    37,    37,    37,    37,   nil,   nil,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    37,    37,   nil,    37,   nil,
    37,    39,    39,    39,    39,    39,    39,    39,    39,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    39,    39,   nil,    39,   nil,    39,    42,    42,    42,    42,
    42,    42,    42,    42,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,    42,    42,   nil,    42,   nil,
    42,    45,    45,    45,    45,    45,    45,    45,    45,   nil,
   nil,    45,    47,    47,    47,    47,    47,    47,    47,    47,
    45,    45,    47,    45,   nil,    45,   nil,   nil,   nil,   nil,
    47,    47,    47,   nil,    47,   nil,    47,    74,    74,    74,
    74,    74,    74,    74,    74,   nil,   nil,    74,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    74,    74,    74,   nil,    74,
   nil,    74,    76,    76,    76,    76,    76,    76,    76,    76,
   nil,   nil,    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    76,    76,    76,   nil,    76,   nil,    76,    77,    77,    77,
    77,    77,    77,    77,    77,   nil,   nil,    77,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    77,    77,   nil,    77,
   nil,    77,    78,    78,    78,    78,    78,    78,    78,    78,
   nil,   nil,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    78,    78,    78,   nil,    78,   nil,    78,    79,    79,    79,
    79,    79,    79,    79,    79,   nil,   nil,    79,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    79,    79,    79,   nil,    79,
   nil,    79,    83,    83,    83,    83,    83,    83,    83,    83,
   nil,   nil,    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    83,    83,    83,   nil,    83,   nil,    83,    92,    92,    92,
    92,    92,    92,    92,    92,   nil,   nil,    92,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    92,    92,    92,   nil,    92,
   nil,    92,    94,    94,    94,    94,    94,    94,    94,    94,
   nil,   nil,    94,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    94,    94,   nil,    94,   nil,    94 ]

racc_action_pointer = [
    -2,     9,     0,   nil,   nil,    19,     7,    10,    29,    32,
   nil,   -13,    23,    48,   nil,    24,    59,    84,   109,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    73,
   nil,   134,   159,   184,   209,   234,   259,   284,    66,   309,
    67,   nil,   334,    -9,   nil,   359,    12,   370,    54,    53,
    54,   nil,    57,    66,    76,   nil,   nil,    20,    83,    85,
    47,    89,    90,   nil,    79,    77,    76,    79,    90,   nil,
   nil,    96,   nil,   nil,   395,   nil,   420,   445,   470,   495,
   nil,   nil,   111,   520,   nil,   nil,   103,   nil,   nil,   100,
   105,   nil,   545,   nil,   570,   nil,   nil ]

racc_action_default = [
   -56,   -56,   -56,    -2,    -3,    -5,    -7,    -9,   -11,   -14,
   -16,   -17,   -56,   -56,   -24,   -29,   -56,   -38,   -39,   -34,
   -35,   -56,   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,
    -1,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,
   -43,   -18,   -56,   -21,   -19,   -56,   -23,   -38,   -56,   -56,
   -37,   -42,   -56,   -40,   -56,   -36,    97,   -56,    -6,    -8,
   -10,   -12,   -13,   -15,   -25,   -56,   -56,   -44,   -56,   -20,
   -22,   -56,   -31,   -32,   -56,   -33,   -56,   -56,   -56,   -38,
   -27,   -28,   -56,   -56,   -30,   -41,   -56,   -48,    -4,   -56,
   -56,   -46,   -56,   -26,   -56,   -47,   -45 ]

racc_goto_table = [
     2,    49,    43,    46,    44,     1,     3,    41,    30,    61,
    62,    57,    58,    59,    60,    63,    48,    66,    54,    52,
    53,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    71,    43,   nil,   nil,    46,    70,    69,   nil,    65,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    89,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    85,   nil,    86,    87,    88,   nil,
   nil,   nil,   nil,    91,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    95,   nil,    96 ]

racc_goto_check = [
     2,    14,    10,    10,    12,     1,     3,    11,     3,     8,
     8,     4,     5,     6,     7,     9,     2,    15,     2,    17,
    20,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    14,    10,   nil,   nil,    10,    12,    11,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,     2,     2,     2,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,     2 ]

racc_goto_pointer = [
   nil,     5,     0,     6,   -20,   -20,   -20,   -20,   -26,   -22,
   -10,    -5,    -9,   nil,   -16,   -23,   nil,     1,   nil,   nil,
     2,   -19 ]

racc_goto_default = [
   nil,   nil,    51,   nil,     5,     6,     7,     8,     9,    10,
    11,   nil,   nil,    14,   nil,   nil,    15,   nil,    19,    50,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 32, :_reduce_none,
  5, 31, :_reduce_4,
  1, 31, :_reduce_none,
  3, 33, :_reduce_6,
  1, 33, :_reduce_none,
  3, 34, :_reduce_8,
  1, 34, :_reduce_none,
  3, 35, :_reduce_10,
  1, 35, :_reduce_none,
  3, 36, :_reduce_12,
  3, 36, :_reduce_13,
  1, 36, :_reduce_none,
  3, 37, :_reduce_15,
  1, 37, :_reduce_none,
  1, 38, :_reduce_none,
  2, 38, :_reduce_18,
  2, 38, :_reduce_19,
  2, 40, :_reduce_20,
  1, 40, :_reduce_none,
  2, 41, :_reduce_22,
  1, 41, :_reduce_none,
  1, 39, :_reduce_none,
  3, 39, :_reduce_25,
  6, 39, :_reduce_26,
  4, 39, :_reduce_27,
  4, 39, :_reduce_28,
  1, 42, :_reduce_29,
  4, 42, :_reduce_30,
  3, 42, :_reduce_31,
  3, 42, :_reduce_32,
  3, 42, :_reduce_33,
  1, 42, :_reduce_none,
  1, 45, :_reduce_none,
  2, 45, :_reduce_none,
  1, 43, :_reduce_none,
  0, 43, :_reduce_38,
  0, 46, :_reduce_39,
  1, 46, :_reduce_none,
  3, 48, :_reduce_41,
  1, 48, :_reduce_42,
  0, 44, :_reduce_43,
  1, 44, :_reduce_none,
  5, 50, :_reduce_45,
  3, 50, :_reduce_46,
  5, 49, :_reduce_47,
  3, 49, :_reduce_48,
  1, 47, :_reduce_49,
  1, 47, :_reduce_50,
  1, 47, :_reduce_51,
  1, 47, :_reduce_52,
  1, 47, :_reduce_53,
  1, 47, :_reduce_54,
  1, 47, :_reduce_55 ]

racc_reduce_n = 56

racc_shift_n = 97

racc_token_table = {
  false => 0,
  :error => 1,
  :tINT => 2,
  :tUINT => 3,
  :tDOUBLE => 4,
  :tBOOL => 5,
  :tNULL => 6,
  :tSTRING => 7,
  :tBYTES => 8,
  :tIDENTIFIER => 9,
  :tMULTIOP => 10,
  :tADDOP => 11,
  :tSUBOP => 12,
  :tRELOP => 13,
  :tANDOP => 14,
  :tOROP => 15,
  :tEOF => 16,
  :UMINUS => 17,
  "?" => 18,
  ":" => 19,
  "!" => 20,
  "." => 21,
  "(" => 22,
  ")" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "tINT",
  "tUINT",
  "tDOUBLE",
  "tBOOL",
  "tNULL",
  "tSTRING",
  "tBYTES",
  "tIDENTIFIER",
  "tMULTIOP",
  "tADDOP",
  "tSUBOP",
  "tRELOP",
  "tANDOP",
  "tOROP",
  "tEOF",
  "UMINUS",
  "\"?\"",
  "\":\"",
  "\"!\"",
  "\".\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "$start",
  "target",
  "expr",
  "eof",
  "conditional_or",
  "conditional_and",
  "relation",
  "addition",
  "multiplication",
  "unary",
  "member",
  "negated_member",
  "negative_member",
  "primary",
  "maybe_expr_list",
  "maybe_field_inits",
  "identifier",
  "maybe_map_inits",
  "literal",
  "expr_list",
  "map_inits",
  "field_inits" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.ry', 17)
  def _reduce_4(val, _values, result)
     result = Cel::Condition.new(val[0], val[2], val[4])
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.ry', 20)
  def _reduce_6(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.ry', 23)
  def _reduce_8(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.ry', 26)
  def _reduce_10(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.ry', 29)
  def _reduce_12(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 30)
  def _reduce_13(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.ry', 33)
  def _reduce_15(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_18(val, _values, result)
     result = Cel::Operation.new("!", [val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 39)
  def _reduce_19(val, _values, result)
     result = Cel::Operation.new("-", [val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 41)
  def _reduce_20(val, _values, result)
     result = Cel::Operation.new("!", [val[1]])
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.ry', 44)
  def _reduce_22(val, _values, result)
     result = Cel::Operation.new("-", [val[1]])
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.ry', 48)
  def _reduce_25(val, _values, result)
     result = Cel::Invoke.new(var: val[0], func: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 49)
  def _reduce_26(val, _values, result)
     result = Cel::Invoke.new(var: val[0], func: val[2], args: [val[4]].flatten(1))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_27(val, _values, result)
     result = Cel::Invoke.new(var: val[0], func: "[]", args: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 51)
  def _reduce_28(val, _values, result)
     result = Cel::Message.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 54)
  def _reduce_29(val, _values, result)
     result = Cel::Identifier.new(validated_id!(val[0]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 55)
  def _reduce_30(val, _values, result)
     result = Cel::Invoke.new(func: validated_id!(val[0]), args: [val[2]].flatten(1))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_31(val, _values, result)
     result = Cel::Group.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 57)
  def _reduce_32(val, _values, result)
     result = Cel::List.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_33(val, _values, result)
     result = Cel::Map.new(Hash[val[1]])
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.ry', 65)
  def _reduce_38(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 67)
  def _reduce_39(val, _values, result)
     result = {}
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_41(val, _values, result)
     result = Array(val[0]) << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 71)
  def _reduce_42(val, _values, result)
     [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 73)
  def _reduce_43(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.ry', 76)
  def _reduce_45(val, _values, result)
     result = val[0].merge(Cel::Identifier.new(val[2]) => val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 77)
  def _reduce_46(val, _values, result)
     result = { Cel::Identifier.new(val[0]) => val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 79)
  def _reduce_47(val, _values, result)
     val[0][val[2]] = val[4]; result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 80)
  def _reduce_48(val, _values, result)
     result = { val[0] => val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 82)
  def _reduce_49(val, _values, result)
     result = Cel::Number.new(:int, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 83)
  def _reduce_50(val, _values, result)
     result = Cel::Number.new(:uint, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 84)
  def _reduce_51(val, _values, result)
     result = Cel::Number.new(:double, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 85)
  def _reduce_52(val, _values, result)
     result = Cel::Bool.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 86)
  def _reduce_53(val, _values, result)
     result = Cel::Null.new()
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 87)
  def _reduce_54(val, _values, result)
     result = Cel::String.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 88)
  def _reduce_55(val, _values, result)
     result = Cel::Bytes.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Cel


# if $0 == __FILE__
#   examples = <<EOS
# 123
# 12345
# 1.2
# 1e2
# -1.2e2
# 12u
# 0xa123
# ""
# '""'
# '''x''x'''
# "\""
# "\\"
# r"\\"
# b"abc"
# b"ÿ"
# b"\303\277"
# "\303\277"
# "\377"
# b"\377"
# "\xFF"
# b"\xFF"

# 1 + 2
# 3 - 2
# " Some String with \"escapes\""
# 'another string'
# a.b.c == 1
# d > 2
# a.b.c * 3 == 1 && d > 2
# a.b.c
# wiri
# // a.driving_license = "CA"
# // 1 = 2
# // 2 = "a"
# // a.b.c > "a"
# EOS
#   puts 'Parsing...'
#   parser = Cel::Parser.new
#   examples.each_line do |line|
#     puts "line: #{line.inspect}"
#     puts parser.parse(line)
#   end
# end

# The grammar of CEL is defined below, using | for alternatives, [] for optional, {} for repeated, and () for grouping.
# Expr           = ConditionalOr ["?" ConditionalOr ":" Expr] ;
# ConditionalOr  = [ConditionalOr "||"] ConditionalAnd ;
# ConditionalAnd = [ConditionalAnd "&&"] Relation ;
# Relation       = [Relation Relop] Addition ;
# Relop          = "<" | "<=" | ">=" | ">" | "==" | "!=" | "in" ;
# Addition       = [Addition ("+" | "-")] Multiplication ;
# Multiplication = [Multiplication ("*" | "/" | "%")] Unary ;
# Unary          = Member
#                | "!" {"!"} Member
#                | "-" {"-"} Member
#                ;
# Member         = Primary
#                | Member "." IDENT ["(" [ExprList] ")"]
#                | Member "[" Expr "]"
#                | Member "{" [FieldInits] "}"
#                ;
# Primary        = ["."] IDENT ["(" [ExprList] ")"]
#                | "(" Expr ")"
#                | "[" [ExprList] "]"
#                | "{" [MapInits] "}"
#                | LITERAL
#                ;
# ExprList       = Expr {"," Expr} ;
# FieldInits     = IDENT ":" Expr {"," IDENT ":" Expr} ;
# MapInits       = Expr ":" Expr {"," Expr ":" Expr} ;

# IDENT          ::= [_a-zA-Z][_a-zA-Z0-9]* - RESERVED
# LITERAL        ::= INT_LIT | UINT_LIT | FLOAT_LIT | STRING_LIT | BYTES_LIT
# | BOOL_LIT | NULL_LIT
# INT_LIT        ::= -? DIGIT+ | -? 0x HEXDIGIT+
# UINT_LIT       ::= INT_LIT [uU]
# FLOAT_LIT      ::= -? DIGIT* . DIGIT+ EXPONENT? | -? DIGIT+ EXPONENT
# DIGIT          ::= [0-9]
# HEXDIGIT       ::= [0-9abcdefABCDEF]
# EXPONENT       ::= [eE] [+-]? DIGIT+
# STRING_LIT     ::= [rR]? ( "    ~( " | NEWLINE )*  "
#         | '    ~( ' | NEWLINE )*  '
#         | """  ~"""*              """
#         | '''  ~'''*              '''
#         )
# BYTES_LIT      ::= [bB] STRING_LIT
# ESCAPE         ::= \ [bfnrt"'\]
# | \ x HEXDIGIT HEXDIGIT
# | \ u HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
# | \ U HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
# | \ [0-3] [0-7] [0-7]
# NEWLINE        ::= \r\n | \r | \n
# BOOL_LIT       ::= "true" | "false"
# NULL_LIT       ::= "null"
# RESERVED       ::= BOOL_LIT | NULL_LIT | "in"
# | "as" | "break" | "const" | "continue" | "else"
# | "for" | "function" | "if" | "import" | "let"
# | "loop" | "package" | "namespace" | "return"
# | "var" | "void" | "while"
# WHITESPACE     ::= [\t\n\f\r ]+
# COMMENT        ::= '//' ~NEWLINE* NEWLINE
