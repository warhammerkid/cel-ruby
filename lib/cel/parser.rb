#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'
require 'bigdecimal'
require 'cel/ast/elements'
module Cel
  class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 96)


OPERATORS = {
  **Hash[Cel::LOGICAL_OPERATORS.map{|op| [op, :tRELOP] }],
  **Hash[Cel::ADD_OPERATORS.map{|op| [op, :tADDOP] }],
  **Hash[Cel::MULTI_OPERATORS.map{|op| [op, :tMULTIOP] }],
  "&&" => :tANDOP,
  "||" => :tOROP
}

OPERATORS_RE = Regexp.union(*OPERATORS.keys)

RESERVED = %W[
as break const continue else
for function if import let
loop package namespace return
var void while
]

IDENTIFIER_REGEX = /[a-zA-Z][_a-zA-Z0-9]*/

STRING_LIT_REGEX = Regexp.union(
  /"""(?~""")*"""/,
  /'''(?~''')*'''/,
  /"(\\"|[^"])*"/,
  /'(\\'|[^'])*'/,
)

NUMBER_REGEX = Regexp.union(
  /(0x[0-9a-fA-F]+)[uU]?/, # hexadecimal
  /(\d+)[uU]/, # uinteger
  /((\d*\.\d+)|\d+)([eE][+\-]?\d+)?/, # integer, float, exponent
)

def parse(str)
  tokenize(str)
  do_parse
end

def tokenize(str)
  str.force_encoding(Encoding::BINARY) unless str.valid_encoding?

  scanner = StringScanner.new(str)

  @q = []

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # skip whitespace
    when scanner.scan(/#(( *)|( ?(?<string>.*)))\n/)
      # skip comment lines
    when scanner.scan(/\-?#{NUMBER_REGEX}/)
      @q << convert_to_number(scanner)
    when scanner.scan(/true|false/)
      @q << [:tBOOL, scanner.matched == "true"]
    when scanner.scan(/null/)
      @q << [:tNULL]
    when scanner.scan(/[bB]?[rR]?#{STRING_LIT_REGEX}/) # string
      # s = scanner.matched.yield_self {|s| s[1, s.length - 2] }
      #                  .gsub(DBL_QUOTE_STR_ESCAPE_SEQUENCES_RE) do |match|
      #                    case match
      #                    when '\\a' then "\a"
      #                    when '\\b' then "\b"
      #                    when '\\e' then "\e"
      #                    when '\\f' then "\f"
      #                    when '\\n' then "\n"
      #                    when '\\r' then "\r"
      #                    when '\\s' then "\s"
      #                    when '\\t' then "\t"
      #                    when '\\v' then "\v"
      #                    when '\\"' then '"'
      #                    end
      #                  end

      # s = scanner.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\'/, "'")

      str = scanner.matched

      @q << if str.start_with?("b")
        [:tBYTES, convert_to_bytes(str.byteslice(2..-2))]
      else
        [:tSTRING, convert_to_string(str)]
      end
    when scanner.scan(IDENTIFIER_REGEX)
      word = scanner.matched
      if RESERVED.include?(word)
        @q << [:tRESERVED, scanner.matched]
      elsif word == "in"
        @q << [OPERATORS[scanner.matched], scanner.matched]
      else
        @q << [:tIDENTIFIER, scanner.matched]
      end
    when scanner.scan(OPERATORS_RE)
      @q << [OPERATORS[scanner.matched], scanner.matched]
    when scanner.scan(/\A.|\n/o)
      s = scanner.matched
      @q << [s, s]
    else
      puts "fuckness"
    end
  end
  @q << [:tEOF, false]
end

def next_token
  @q.shift
end

def convert_to_number(scanner)
  matched = scanner.matched
  hexa, uint, number, floating, exp = scanner.captures

  if !hexa.empty?
    return [:tINT, hexa.to_i(16)]
  end

  if !uint.empty?
    return [:tUINT, Integer(uint)]
  end

  if !exp.empty?
    # third matched group, can only be a floating exponential, let's convert tout suite
    [:tDOUBLE, BigDecimal(matched)]
  elsif !floating.empty?
    if number == floating || floating.start_with?(".")
      [:tDOUBLE, Float(matched)]
    elsif number.empty?
      [:tDOUBLE, BigDecimal(matched)]
    end
  else
    if matched[-1].downcase == "u"
      [:tINT, Integer(matched[0..-2]).abs]
    else
      [:tINT, Integer(matched)]
    end
  end
end

TRIPE_DOUBLE_QUOTES = %Q{"""}
TRIPE_SINGLE_QUOTES = %Q{'''}

def convert_to_string(str)

  if str.start_with?("r")
    # If preceded by an r or R character, the string is a raw string
    # and does not interpret escape sequences.
    str = str.byteslice(2..-2).inspect.byteslice(1..-2)
    return str
  end

  if str.size > 6 && (
    (str.start_with?(TRIPE_DOUBLE_QUOTES) && str.end_with?(TRIPE_DOUBLE_QUOTES)) ||
    (str.start_with?(TRIPE_SINGLE_QUOTES) && str.end_with?(TRIPE_SINGLE_QUOTES)))
    str = str.byteslice(3..-4)
  else
    str = str.byteslice(1..-2)
  end

  cleanup_escape_sequences(str)
end

def convert_to_bytes(str)
  str.unpack("C*")
end


BIN_ESCAPE = /\\([0-3][0-7][0-7])/
HEX_ESCAPE = /\\x([0-9a-fA-F]{2})/
BPM_ESCAPE = /\\u([0-9a-fA-F]{4})/
UNICODE_ESCAPE = /\\u([0-9a-fA-F]{4})/
WHITESPACE_ESCAPE = /\\([bfnrt"'\\])/
ESCAPE_UNION = Regexp.union(BIN_ESCAPE, HEX_ESCAPE, BPM_ESCAPE, WHITESPACE_ESCAPE)
# For the sake of a readable representation, the escape sequences (ESCAPE) are kept
# implicit in string tokens. This means that strings without the r or R (raw) prefix
# process ESCAPE sequences, while in strings with the raw prefix they stay uninterpreted.
# See documentation of string literals below.
def cleanup_escape_sequences(str)
  str.gsub!(ESCAPE_UNION) do |match|
    case match
    when /\\"/
      "\""
    when BIN_ESCAPE
      # For strings, it denotes the unicode code point.
      Regexp.last_match(1).to_i.chr(Encoding::UTF_8)
    when HEX_ESCAPE
      # For strings, it denotes the unicode code point.
      Regexp.last_match(1).hex.chr(Encoding::UTF_8)
    when BPM_ESCAPE
      Regexp.last_match(1).hex.chr(Encoding::BPM)
    when UNICODE_ESCAPE
      # encoding a Unicode code point. Valid only for string literals.
      Regexp.last_match(1).hex.chr(Encoding::UTF_8)
    when WHITESPACE_ESCAPE
      Regexp.last_match(0)
    end
  end
  str
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    22,    23,    24,    25,    26,    27,    28,    37,    20,    32,
    38,    29,    39,    76,     4,     4,    33,    34,    12,    13,
    21,    16,    35,    17,    36,    18,    22,    23,    24,    25,
    26,    27,    28,    46,    20,    22,    23,    24,    25,    26,
    27,    28,    54,    20,    41,    37,    21,    16,    38,    17,
    39,    18,    55,    62,    44,    21,    16,    66,    17,    70,
    18,    22,    23,    24,    25,    26,    27,    28,    71,    20,
    22,    23,    24,    25,    26,    27,    28,    72,    20,    12,
    13,    21,    16,    73,    17,    74,    18,    75,    12,    13,
    21,    16,    33,    17,    34,    18,    22,    23,    24,    25,
    26,    27,    28,    35,    20,    22,    23,    24,    25,    26,
    27,    28,    36,    20,    12,    13,    21,    16,    77,    17,
    78,    18,    79,    12,    13,    21,    16,    80,    17,    81,
    18,    22,    23,    24,    25,    26,    27,    28,    82,    20,
    22,    23,    24,    25,    26,    27,    28,    88,    20,    12,
    13,    21,    16,    90,    17,    91,    18,    92,    12,    13,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,   nil,    20,    22,    23,    24,    25,    26,
    27,    28,   nil,    20,    12,    13,    21,    16,   nil,    17,
   nil,    18,   nil,    12,    13,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,   nil,    20,
    22,    23,    24,    25,    26,    27,    28,   nil,    20,    12,
    13,    21,    16,   nil,    17,   nil,    18,   nil,    12,    13,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,   nil,    20,    22,    23,    24,    25,    26,
    27,    28,   nil,    20,    41,    37,    21,    16,    38,    17,
    39,    18,   nil,   nil,    44,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,   nil,    20,
    22,    23,    24,    25,    26,    27,    28,   nil,    20,    12,
    13,    21,    16,   nil,    17,   nil,    18,   nil,    12,    13,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,   nil,    20,    22,    23,    24,    25,    26,
    27,    28,   nil,    20,    12,    13,    21,    16,   nil,    17,
   nil,    18,   nil,    12,    13,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,   nil,    20,
    22,    23,    24,    25,    26,    27,    28,   nil,    20,    12,
    13,    21,    16,   nil,    17,   nil,    18,   nil,    12,    13,
    21,    16,   nil,    17,   nil,    18,    22,    23,    24,    25,
    26,    27,    28,   nil,    20,    22,    23,    24,    25,    26,
    27,    28,   nil,    20,    12,    13,    21,    16,   nil,    17,
   nil,    18,   nil,    12,    13,    21,    16,   nil,    17,   nil,
    18,    22,    23,    24,    25,    26,    27,    28,    32,    20,
   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
    13,    21,    16,   nil,    17,   nil,    18 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     0,    11,     0,    56,
    11,     1,    11,    56,     0,     2,     6,     7,     0,     0,
     0,     0,     8,     0,     9,     0,    12,    12,    12,    12,
    12,    12,    12,    15,    12,    13,    13,    13,    13,    13,
    13,    13,    21,    13,    12,    42,    12,    12,    42,    12,
    42,    12,    29,    37,    13,    13,    13,    39,    13,    47,
    13,    16,    16,    16,    16,    16,    16,    16,    48,    16,
    17,    17,    17,    17,    17,    17,    17,    49,    17,    16,
    16,    16,    16,    51,    16,    52,    16,    53,    17,    17,
    17,    17,    57,    17,    58,    17,    18,    18,    18,    18,
    18,    18,    18,    59,    18,    31,    31,    31,    31,    31,
    31,    31,    60,    31,    18,    18,    18,    18,    62,    18,
    63,    18,    64,    31,    31,    31,    31,    65,    31,    66,
    31,    32,    32,    32,    32,    32,    32,    32,    69,    32,
    33,    33,    33,    33,    33,    33,    33,    80,    33,    32,
    32,    32,    32,    84,    32,    87,    32,    88,    33,    33,
    33,    33,   nil,    33,   nil,    33,    34,    34,    34,    34,
    34,    34,    34,   nil,    34,    35,    35,    35,    35,    35,
    35,    35,   nil,    35,    34,    34,    34,    34,   nil,    34,
   nil,    34,   nil,    35,    35,    35,    35,   nil,    35,   nil,
    35,    36,    36,    36,    36,    36,    36,    36,   nil,    36,
    38,    38,    38,    38,    38,    38,    38,   nil,    38,    36,
    36,    36,    36,   nil,    36,   nil,    36,   nil,    38,    38,
    38,    38,   nil,    38,   nil,    38,    41,    41,    41,    41,
    41,    41,    41,   nil,    41,    44,    44,    44,    44,    44,
    44,    44,   nil,    44,    41,    45,    41,    41,    45,    41,
    45,    41,   nil,   nil,    44,    44,    44,   nil,    44,   nil,
    44,    46,    46,    46,    46,    46,    46,    46,   nil,    46,
    72,    72,    72,    72,    72,    72,    72,   nil,    72,    46,
    46,    46,    46,   nil,    46,   nil,    46,   nil,    72,    72,
    72,    72,   nil,    72,   nil,    72,    74,    74,    74,    74,
    74,    74,    74,   nil,    74,    75,    75,    75,    75,    75,
    75,    75,   nil,    75,    74,    74,    74,    74,   nil,    74,
   nil,    74,   nil,    75,    75,    75,    75,   nil,    75,   nil,
    75,    76,    76,    76,    76,    76,    76,    76,   nil,    76,
    77,    77,    77,    77,    77,    77,    77,   nil,    77,    76,
    76,    76,    76,   nil,    76,   nil,    76,   nil,    77,    77,
    77,    77,   nil,    77,   nil,    77,    81,    81,    81,    81,
    81,    81,    81,   nil,    81,    90,    90,    90,    90,    90,
    90,    90,   nil,    90,    81,    81,    81,    81,   nil,    81,
   nil,    81,   nil,    90,    90,    90,    90,   nil,    90,   nil,
    90,    92,    92,    92,    92,    92,    92,    92,     5,    92,
   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    92,
    92,    92,    92,   nil,    92,   nil,    92 ]

racc_action_pointer = [
    -2,    11,    -1,   nil,   nil,   403,     2,     4,    10,    13,
   nil,   -15,    24,    33,   nil,    10,    59,    68,    94,   nil,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,
   nil,   103,   129,   138,   164,   173,   199,    43,   208,    47,
   nil,   234,    23,   nil,   243,   233,   269,    35,    42,    48,
   nil,    55,    56,    68,   nil,   nil,    -6,    78,    81,    91,
   101,   nil,    95,    94,    94,    98,   110,   nil,   nil,   114,
   nil,   nil,   278,   nil,   304,   313,   339,   348,   nil,   nil,
   137,   374,   nil,   nil,   134,   nil,   nil,   131,   138,   nil,
   383,   nil,   409,   nil,   nil ]

racc_action_default = [
   -55,   -55,   -55,    -2,    -3,    -5,    -7,    -9,   -11,   -13,
   -15,   -16,   -55,   -55,   -23,   -28,   -55,   -37,   -38,   -33,
   -34,   -55,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,
    -1,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -42,
   -17,   -55,   -20,   -18,   -55,   -22,   -37,   -55,   -55,   -36,
   -41,   -55,   -39,   -55,   -35,    95,   -55,    -6,    -8,   -10,
   -12,   -14,   -24,   -55,   -55,   -43,   -55,   -19,   -21,   -55,
   -30,   -31,   -55,   -32,   -55,   -55,   -55,   -37,   -26,   -27,
   -55,   -55,   -29,   -40,   -55,   -47,    -4,   -55,   -55,   -45,
   -55,   -25,   -55,   -46,   -44 ]

racc_goto_table = [
     2,    48,    42,    45,    43,     1,     3,    40,    30,    56,
    57,    58,    59,    60,    61,    64,    47,    51,    53,    52,
    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    69,    42,   nil,   nil,    45,    68,    67,   nil,    63,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    87,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    83,   nil,    84,    85,    86,   nil,   nil,   nil,
   nil,    89,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    93,   nil,    94 ]

racc_goto_check = [
     2,    14,    10,    10,    12,     1,     3,    11,     3,     4,
     5,     6,     7,     8,     9,    15,     2,    17,     2,    20,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,    10,   nil,   nil,    10,    12,    11,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2,     2,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,     2 ]

racc_goto_pointer = [
   nil,     5,     0,     6,   -22,   -22,   -22,   -22,   -22,   -22,
   -10,    -5,    -9,   nil,   -16,   -24,   nil,    -1,   nil,   nil,
     1,   -19 ]

racc_goto_default = [
   nil,   nil,    50,   nil,     5,     6,     7,     8,     9,    10,
    11,   nil,   nil,    14,   nil,   nil,    15,   nil,    19,    49,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 33, :_reduce_none,
  5, 32, :_reduce_4,
  1, 32, :_reduce_none,
  3, 34, :_reduce_6,
  1, 34, :_reduce_none,
  3, 35, :_reduce_8,
  1, 35, :_reduce_none,
  3, 36, :_reduce_10,
  1, 36, :_reduce_none,
  3, 37, :_reduce_12,
  1, 37, :_reduce_none,
  3, 38, :_reduce_14,
  1, 38, :_reduce_none,
  1, 39, :_reduce_none,
  2, 39, :_reduce_17,
  2, 39, :_reduce_18,
  2, 41, :_reduce_19,
  1, 41, :_reduce_none,
  2, 42, :_reduce_21,
  1, 42, :_reduce_none,
  1, 40, :_reduce_none,
  3, 40, :_reduce_24,
  6, 40, :_reduce_25,
  4, 40, :_reduce_26,
  4, 40, :_reduce_27,
  1, 43, :_reduce_28,
  4, 43, :_reduce_29,
  3, 43, :_reduce_30,
  3, 43, :_reduce_31,
  3, 43, :_reduce_32,
  1, 43, :_reduce_none,
  1, 46, :_reduce_none,
  2, 46, :_reduce_none,
  1, 44, :_reduce_none,
  0, 44, :_reduce_37,
  0, 47, :_reduce_38,
  1, 47, :_reduce_none,
  3, 49, :_reduce_40,
  1, 49, :_reduce_41,
  0, 45, :_reduce_42,
  1, 45, :_reduce_none,
  5, 51, :_reduce_none,
  3, 51, :_reduce_45,
  5, 50, :_reduce_46,
  3, 50, :_reduce_47,
  1, 48, :_reduce_48,
  1, 48, :_reduce_49,
  1, 48, :_reduce_50,
  1, 48, :_reduce_51,
  1, 48, :_reduce_52,
  1, 48, :_reduce_53,
  1, 48, :_reduce_54 ]

racc_reduce_n = 55

racc_shift_n = 95

racc_token_table = {
  false => 0,
  :error => 1,
  :tINT => 2,
  :tUINT => 3,
  :tDOUBLE => 4,
  :tBOOL => 5,
  :tNULL => 6,
  :tSTRING => 7,
  :tBYTES => 8,
  :tRESERVED => 9,
  :tIDENTIFIER => 10,
  :tMULTIOP => 11,
  :tADDOP => 12,
  :tRELOP => 13,
  :tANDOP => 14,
  :tOROP => 15,
  :tEOF => 16,
  :UMINUS => 17,
  "?" => 18,
  ":" => 19,
  "!" => 20,
  "-" => 21,
  "." => 22,
  "(" => 23,
  ")" => 24,
  "[" => 25,
  "]" => 26,
  "{" => 27,
  "}" => 28,
  "," => 29 }

racc_nt_base = 30

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "tINT",
  "tUINT",
  "tDOUBLE",
  "tBOOL",
  "tNULL",
  "tSTRING",
  "tBYTES",
  "tRESERVED",
  "tIDENTIFIER",
  "tMULTIOP",
  "tADDOP",
  "tRELOP",
  "tANDOP",
  "tOROP",
  "tEOF",
  "UMINUS",
  "\"?\"",
  "\":\"",
  "\"!\"",
  "\"-\"",
  "\".\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "$start",
  "target",
  "expr",
  "eof",
  "conditional_or",
  "conditional_and",
  "relation",
  "addition",
  "multiplication",
  "unary",
  "member",
  "negated_member",
  "negative_member",
  "primary",
  "maybe_expr_list",
  "maybe_field_inits",
  "identifier",
  "maybe_map_inits",
  "literal",
  "expr_list",
  "map_inits",
  "field_inits" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.ry', 17)
  def _reduce_4(val, _values, result)
     result = Cel::Condition.new(val[0], val[2], val[4])
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.ry', 20)
  def _reduce_6(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.ry', 23)
  def _reduce_8(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.ry', 26)
  def _reduce_10(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.ry', 29)
  def _reduce_12(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.ry', 32)
  def _reduce_14(val, _values, result)
     result = Cel::Operation.new(val[1], [val[0], val[2]])
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.ry', 37)
  def _reduce_17(val, _values, result)
     result = Cel::Operation.new("!", [val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_18(val, _values, result)
     result = Cel::Operation.new("-", [val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 40)
  def _reduce_19(val, _values, result)
     result = Cel::Operation.new("!", [val[1]])
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.ry', 43)
  def _reduce_21(val, _values, result)
     result = Cel::Operation.new("-", [val[1]])
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.ry', 47)
  def _reduce_24(val, _values, result)
     result = Cel::Invoke.new(var: val[0], func: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 48)
  def _reduce_25(val, _values, result)
     result = Cel::Invoke.new(var: val[0], func: val[2], args: Array(val[4]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 49)
  def _reduce_26(val, _values, result)
     result = Cel::Invoke.new(var: val[0], func: "[]", args: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_27(val, _values, result)
     result = Cel::Message.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 53)
  def _reduce_28(val, _values, result)
     result = Cel::Identifier.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 54)
  def _reduce_29(val, _values, result)
     result = Cel::Invoke.new(func: val[0], args: Array(val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 55)
  def _reduce_30(val, _values, result)
     result = Cel::Group.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_31(val, _values, result)
     result = Cel::List.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 57)
  def _reduce_32(val, _values, result)
     result = Cel::Map.new(Hash[val[1]])
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_37(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 66)
  def _reduce_38(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.ry', 69)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_41(val, _values, result)
     [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 72)
  def _reduce_42(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.ry', 76)
  def _reduce_45(val, _values, result)
     result = { Cel::Identifier.new(val[0]) => val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 78)
  def _reduce_46(val, _values, result)
     val[0][val[2]] = val[4]; result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 79)
  def _reduce_47(val, _values, result)
     result = { val[0] => val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 81)
  def _reduce_48(val, _values, result)
     result = Cel::Number.new(:int, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 82)
  def _reduce_49(val, _values, result)
     result = Cel::Number.new(:uint, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 83)
  def _reduce_50(val, _values, result)
     result = Cel::Number.new(:double, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 84)
  def _reduce_51(val, _values, result)
     result = Cel::Bool.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 85)
  def _reduce_52(val, _values, result)
     result = Cel::Null.new()
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 86)
  def _reduce_53(val, _values, result)
     result = Cel::String.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 87)
  def _reduce_54(val, _values, result)
     result = Cel::Bytes.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Cel


# if $0 == __FILE__
#   examples = <<EOS
# 123
# 12345
# 1.2
# 1e2
# -1.2e2
# 12u
# 0xa123
# ""
# '""'
# '''x''x'''
# "\""
# "\\"
# r"\\"
# b"abc"
# b"ÿ"
# b"\303\277"
# "\303\277"
# "\377"
# b"\377"
# "\xFF"
# b"\xFF"

# 1 + 2
# 3 - 2
# " Some String with \"escapes\""
# 'another string'
# a.b.c == 1
# d > 2
# a.b.c * 3 == 1 && d > 2
# a.b.c
# wiri
# // a.driving_license = "CA"
# // 1 = 2
# // 2 = "a"
# // a.b.c > "a"
# EOS
#   puts 'Parsing...'
#   parser = Cel::Parser.new
#   examples.each_line do |line|
#     puts "line: #{line.inspect}"
#     puts parser.parse(line)
#   end
# end

# The grammar of CEL is defined below, using | for alternatives, [] for optional, {} for repeated, and () for grouping.
# Expr           = ConditionalOr ["?" ConditionalOr ":" Expr] ;
# ConditionalOr  = [ConditionalOr "||"] ConditionalAnd ;
# ConditionalAnd = [ConditionalAnd "&&"] Relation ;
# Relation       = [Relation Relop] Addition ;
# Relop          = "<" | "<=" | ">=" | ">" | "==" | "!=" | "in" ;
# Addition       = [Addition ("+" | "-")] Multiplication ;
# Multiplication = [Multiplication ("*" | "/" | "%")] Unary ;
# Unary          = Member
#                | "!" {"!"} Member
#                | "-" {"-"} Member
#                ;
# Member         = Primary
#                | Member "." IDENT ["(" [ExprList] ")"]
#                | Member "[" Expr "]"
#                | Member "{" [FieldInits] "}"
#                ;
# Primary        = ["."] IDENT ["(" [ExprList] ")"]
#                | "(" Expr ")"
#                | "[" [ExprList] "]"
#                | "{" [MapInits] "}"
#                | LITERAL
#                ;
# ExprList       = Expr {"," Expr} ;
# FieldInits     = IDENT ":" Expr {"," IDENT ":" Expr} ;
# MapInits       = Expr ":" Expr {"," Expr ":" Expr} ;

# IDENT          ::= [_a-zA-Z][_a-zA-Z0-9]* - RESERVED
# LITERAL        ::= INT_LIT | UINT_LIT | FLOAT_LIT | STRING_LIT | BYTES_LIT
# | BOOL_LIT | NULL_LIT
# INT_LIT        ::= -? DIGIT+ | -? 0x HEXDIGIT+
# UINT_LIT       ::= INT_LIT [uU]
# FLOAT_LIT      ::= -? DIGIT* . DIGIT+ EXPONENT? | -? DIGIT+ EXPONENT
# DIGIT          ::= [0-9]
# HEXDIGIT       ::= [0-9abcdefABCDEF]
# EXPONENT       ::= [eE] [+-]? DIGIT+
# STRING_LIT     ::= [rR]? ( "    ~( " | NEWLINE )*  "
#         | '    ~( ' | NEWLINE )*  '
#         | """  ~"""*              """
#         | '''  ~'''*              '''
#         )
# BYTES_LIT      ::= [bB] STRING_LIT
# ESCAPE         ::= \ [bfnrt"'\]
# | \ x HEXDIGIT HEXDIGIT
# | \ u HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
# | \ U HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
# | \ [0-3] [0-7] [0-7]
# NEWLINE        ::= \r\n | \r | \n
# BOOL_LIT       ::= "true" | "false"
# NULL_LIT       ::= "null"
# RESERVED       ::= BOOL_LIT | NULL_LIT | "in"
# | "as" | "break" | "const" | "continue" | "else"
# | "for" | "function" | "if" | "import" | "let"
# | "loop" | "package" | "namespace" | "return"
# | "var" | "void" | "while"
# WHITESPACE     ::= [\t\n\f\r ]+
# COMMENT        ::= '//' ~NEWLINE* NEWLINE
