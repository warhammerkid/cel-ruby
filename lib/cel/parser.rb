#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'
require 'bigdecimal'
module Cel
  class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 57)

RESERVED = %W[
 in
as break const continue else
for function if import let
loop package namespace return
var void while
]

RESERVED_REGEX = Regexp.union(*RESERVED)

STRING_LIT_REGEX = Regexp.union(
  /"""(?~""")*"""/,
  /'''(?~''')*'''/,
  /"(\"|[^"])*"/,
  /'(\'|[^'])*'/,
)

NUMBER_REGEX = Regexp.union(
  /(0x[0-9a-fA-F]+)[uU]?/, # hexadecimal
  /(\d+)[uU]/, # uinteger
  /((\d*\.\d+)|\d+)([eE][+\-]?\d+)?/, # integer, float, exponent
)

def parse(str)
  tokenize(str)
  do_parse
end

def tokenize(str)
  str.force_encoding(Encoding::BINARY) unless str.valid_encoding?

  scanner = StringScanner.new(str)

  @q = []

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # skip whitespace
    when scanner.scan(/#(( *)|( ?(?<string>.*)))\n/)
      # skip comment lines
    when scanner.scan(/\-?#{NUMBER_REGEX}/)
      @q << [:tNUMBER, convert_to_number(scanner)]
    when scanner.scan(/true|false/)
      @q << [:tBOOL, scanner.matched == "true"]
    when scanner.scan(/null/)
      @q << [:tNULL]
    when scanner.scan(/[bB]?[rR]?#{STRING_LIT_REGEX}/) # string
      # s = scanner.matched.yield_self {|s| s[1, s.length - 2] }
      #                  .gsub(DBL_QUOTE_STR_ESCAPE_SEQUENCES_RE) do |match|
      #                    case match
      #                    when '\\a' then "\a"
      #                    when '\\b' then "\b"
      #                    when '\\e' then "\e"
      #                    when '\\f' then "\f"
      #                    when '\\n' then "\n"
      #                    when '\\r' then "\r"
      #                    when '\\s' then "\s"
      #                    when '\\t' then "\t"
      #                    when '\\v' then "\v"
      #                    when '\\"' then '"'
      #                    end
      #                  end

      # s = scanner.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\'/, "'")

      @q << [:tSTRING, convert_to_string(scanner.matched)]
    when scanner.scan(RESERVED_REGEX)
      @q << [:tRESERVED, scanner.matched]
    when scanner.scan(/[a-zA-Z][_a-zA-Z0-9]*/)
      @q << [:tIDENTIFIER, scanner.matched]
    when scanner.scan(/\A.|\n/o)
      s = scanner.matched
      @q << [s, s]
    else
      puts "fuckness"
    end
  end
  @q << [:tEOF, false]
end

def next_token
  @q.shift
end

def convert_to_number(scanner)
  matched = scanner.matched
  hexa, uint, number, floating, exp = scanner.captures

  if !hexa.empty?
    return hexa.to_i(16)
  end

  if !uint.empty?
    return Integer(uint)
  end

  if !exp.empty?
    # third matched group, can only be a floating exponential, let's convert tout suite
    BigDecimal(matched)
  elsif !floating.empty?
    if number == floating || floating.start_with?(".")
      Float(matched)
    elsif number.empty?
      BigDecimal(matched)
    end
  else
    if matched[-1].downcase == "u"
      Integer(matched[0..-2]).abs
    else
      Integer(matched)
    end
  end
end

TRIPE_DOUBLE_QUOTES = %Q{"""}
TRIPE_SINGLE_QUOTES = %Q{'''}

def convert_to_string(str)
  return convert_to_bytes(str.byteslice(2..-2)) if str.start_with?("b")

  if str.start_with?("r")
    # If preceded by an r or R character, the string is a raw string
    # and does not interpret escape sequences.
    str = str.byteslice(2..-2).inspect.byteslice(1..-2)
    return str
  end

  if str.size > 6 && (
    (str.start_with?(TRIPE_DOUBLE_QUOTES) && str.end_with?(TRIPE_DOUBLE_QUOTES)) ||
    (str.start_with?(TRIPE_SINGLE_QUOTES) && str.end_with?(TRIPE_SINGLE_QUOTES)))
    str = str.byteslice(3..-4)
  else
    str = str.byteslice(1..-2)
  end

  cleanup_escape_sequences(str)
end

def convert_to_bytes(str)
  str.unpack("C*")
end


BIN_ESCAPE = /\\([0-3][0-7][0-7])/
HEX_ESCAPE = /\\x([0-9a-fA-F]{2})/
BPM_ESCAPE = /\\u([0-9a-fA-F]{4})/
UNICODE_ESCAPE = /\\u([0-9a-fA-F]{4})/
WHITESPACE_ESCAPE = /\\([bfnrt"'\\])/
ESCAPE_UNION = Regexp.union(BIN_ESCAPE, HEX_ESCAPE, BPM_ESCAPE, WHITESPACE_ESCAPE)
# For the sake of a readable representation, the escape sequences (ESCAPE) are kept
# implicit in string tokens. This means that strings without the r or R (raw) prefix
# process ESCAPE sequences, while in strings with the raw prefix they stay uninterpreted.
# See documentation of string literals below.
def cleanup_escape_sequences(str)
  str.gsub!(ESCAPE_UNION) do |match|
    case match
    when BIN_ESCAPE
      # For strings, it denotes the unicode code point.
      Regexp.last_match(1).to_i.chr(Encoding::UTF_8)
    when HEX_ESCAPE
      # For strings, it denotes the unicode code point.
      Regexp.last_match(1).hex.chr(Encoding::UTF_8)
    when BPM_ESCAPE
      Regexp.last_match(1).hex.chr(Encoding::BPM)
    when UNICODE_ESCAPE
      # encoding a Unicode code point. Valid only for string literals.
      Regexp.last_match(1).hex.chr(Encoding::UTF_8)
    when WHITESPACE_ESCAPE
      Regexp.last_match(0)
    end
  end
  str
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     9,    10,    11,    12,     4,     4,     8,     9,    10,
    11,    17,     6,     8,     9,    10,    11,    18,    19 ]

racc_action_check = [
     0,     0,     0,     0,     1,     2,     0,     6,     6,     6,
     6,    12,     0,    19,    19,    19,    19,    14,    15 ]

racc_action_pointer = [
    -2,     4,    -3,   nil,   nil,   nil,     5,   nil,   nil,   nil,
   nil,   nil,    11,   nil,     2,     2,   nil,   nil,   nil,    11,
   nil ]

racc_action_default = [
   -15,   -15,   -15,    -2,    -3,    -4,    -8,    -6,   -11,   -12,
   -13,   -14,   -15,    -1,   -15,    -7,   -10,    21,    -5,   -15,
    -9 ]

racc_goto_table = [
     7,     3,     1,    13,     2,     5,    16,    14,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20 ]

racc_goto_check = [
     6,     3,     1,     3,     2,     4,     6,     5,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     2,     4,     1,     5,     1,     0,     2 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 18, :_reduce_none,
  1, 18, :_reduce_none,
  1, 20, :_reduce_none,
  1, 19, :_reduce_none,
  3, 21, :_reduce_5,
  1, 21, :_reduce_none,
  1, 22, :_reduce_none,
  0, 22, :_reduce_8,
  3, 24, :_reduce_9,
  1, 24, :_reduce_10,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none ]

racc_reduce_n = 15

racc_shift_n = 21

racc_token_table = {
  false => 0,
  :error => 1,
  :tNUMBER => 2,
  :tBOOL => 3,
  :tNULL => 4,
  :tSTRING => 5,
  :tRESERVED => 6,
  :tIDENTIFIER => 7,
  :tEOF => 8,
  :UMINUS => 9,
  "*" => 10,
  "/" => 11,
  "+" => 12,
  "-" => 13,
  "[" => 14,
  "]" => 15,
  "," => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "tNUMBER",
  "tBOOL",
  "tNULL",
  "tSTRING",
  "tRESERVED",
  "tIDENTIFIER",
  "tEOF",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "$start",
  "target",
  "expression",
  "eof",
  "primary",
  "maybe_expr_list",
  "literal",
  "expr_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.ry', 26)
  def _reduce_5(val, _values, result)
     result = Array(val[1])
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.ry', 34)
  def _reduce_8(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 39)
  def _reduce_9(val, _values, result)
     result = Array(val[0]) << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 40)
  def _reduce_10(val, _values, result)
     [val[0]]
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Cel


# if $0 == __FILE__
#   examples = <<EOS
# 123
# 12345
# 1.2
# 1e2
# -1.2e2
# 12u
# 0xa123
# ""
# '""'
# '''x''x'''
# "\""
# "\\"
# r"\\"
# b"abc"
# b"Ã¿"
# b"\303\277"
# "\303\277"
# "\377"
# b"\377"
# "\xFF"
# b"\xFF"

# 1 + 2
# 3 - 2
# " Some String with \"escapes\""
# 'another string'
# a.b.c == 1
# d > 2
# a.b.c * 3 == 1 && d > 2
# a.b.c
# wiri
# // a.driving_license = "CA"
# // 1 = 2
# // 2 = "a"
# // a.b.c > "a"
# EOS
#   puts 'Parsing...'
#   parser = Cel::Parser.new
#   examples.each_line do |line|
#     puts "line: #{line.inspect}"
#     puts parser.parse(line)
#   end
# end

# Expr           = ConditionalOr ["?" ConditionalOr ":" Expr] ;
# ConditionalOr  = [ConditionalOr "||"] ConditionalAnd ;
# ConditionalAnd = [ConditionalAnd "&&"] Relation ;
# Relation       = [Relation Relop] Addition ;
# Relop          = "<" | "<=" | ">=" | ">" | "==" | "!=" | "in" ;
# Addition       = [Addition ("+" | "-")] Multiplication ;
# Multiplication = [Multiplication ("*" | "/" | "%")] Unary ;
# Unary          = Member
#                | "!" {"!"} Member
#                | "-" {"-"} Member
#                ;
# Member         = Primary
#                | Member "." IDENT ["(" [ExprList] ")"]
#                | Member "[" Expr "]"
#                | Member "{" [FieldInits] "}"
#                ;
# Primary        = ["."] IDENT ["(" [ExprList] ")"]
#                | "(" Expr ")"
#                | "[" [ExprList] "]"
#                | "{" [MapInits] "}"
#                | LITERAL
#                ;
# ExprList       = Expr {"," Expr} ;
# FieldInits     = IDENT ":" Expr {"," IDENT ":" Expr} ;
# MapInits       = Expr ":" Expr {"," Expr ":" Expr} ;

# IDENT          ::= [_a-zA-Z][_a-zA-Z0-9]* - RESERVED
# LITERAL        ::= INT_LIT | UINT_LIT | FLOAT_LIT | STRING_LIT | BYTES_LIT
# | BOOL_LIT | NULL_LIT
# INT_LIT        ::= -? DIGIT+ | -? 0x HEXDIGIT+
# UINT_LIT       ::= INT_LIT [uU]
# FLOAT_LIT      ::= -? DIGIT* . DIGIT+ EXPONENT? | -? DIGIT+ EXPONENT
# DIGIT          ::= [0-9]
# HEXDIGIT       ::= [0-9abcdefABCDEF]
# EXPONENT       ::= [eE] [+-]? DIGIT+
# STRING_LIT     ::= [rR]? ( "    ~( " | NEWLINE )*  "
#         | '    ~( ' | NEWLINE )*  '
#         | """  ~"""*              """
#         | '''  ~'''*              '''
#         )
# BYTES_LIT      ::= [bB] STRING_LIT
# ESCAPE         ::= \ [bfnrt"'\]
# | \ x HEXDIGIT HEXDIGIT
# | \ u HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
# | \ U HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
# | \ [0-3] [0-7] [0-7]
# NEWLINE        ::= \r\n | \r | \n
# BOOL_LIT       ::= "true" | "false"
# NULL_LIT       ::= "null"
# RESERVED       ::= BOOL_LIT | NULL_LIT | "in"
# | "as" | "break" | "const" | "continue" | "else"
# | "for" | "function" | "if" | "import" | "let"
# | "loop" | "package" | "namespace" | "return"
# | "var" | "void" | "while"
# WHITESPACE     ::= [\t\n\f\r ]+
# COMMENT        ::= '//' ~NEWLINE* NEWLINE
